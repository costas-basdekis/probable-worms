{"version":3,"file":"static/js/956.a7bbe6a6.chunk.js","mappings":"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","sources":["worms/RollResult.tsx","worms/DiceRoll.tsx","worms/Chest.tsx","worms/Results.tsx","worms/Evaluation.tsx","worms/RolledStateEvaluator.tsx","worms/UnrolledStateEvaluator.tsx","worms/StateEvaluator.tsx","worms/EvaluationCache.tsx","worms/UnrolledState.tsx","worms/RolledState.tsx","EvaluationCacheCache.tsx","worker.tsx","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["export type RollResult = 1 | 2 | 3 | 4 | 5 | \"W\";\nexport const Worm: RollResult = \"W\";\nexport const rollResults: RollResult[] = [1, 2, 3, 4, 5, Worm];\nexport const ValueMap: Map<RollResult, number> = new Map([\n  [1, 1],\n  [2, 2],\n  [3, 3],\n  [4, 4],\n  [5, 5],\n  [Worm, 5],\n] as [RollResult, number][]);\n","import _ from \"underscore\";\nimport {RollResult, rollResults, ValueMap} from \"./RollResult\";\n\nexport class DiceRoll {\n  counts: Map<RollResult, number>;\n  key: string;\n  total: number;\n\n  static fromDice(dice: RollResult[]): DiceRoll {\n    return new DiceRoll(\n      Object.values(_.groupBy(dice)).map((group) => [group[0], group.length])\n    );\n  }\n\n  constructor(items?: Iterable<readonly [RollResult, number]>) {\n    this.counts = new Map(items as Iterable<readonly [RollResult, number]>);\n    this.key = JSON.stringify(Array.from(this.counts.entries()).sort());\n    this.total = Array.from(this.counts.entries()).reduce(\n      (total, [roll, count]) => total + ValueMap.get(roll)! * count,\n      0\n    );\n  }\n\n  adding(roll: RollResult, count: number): DiceRoll {\n    return new DiceRoll([\n      ...Array.from(this.counts.entries()),\n      [roll, count] as [RollResult, number],\n    ]);\n  }\n\n  copy(): DiceRoll {\n    return new DiceRoll(this.counts.entries());\n  }\n\n  get(key: RollResult): number {\n    return this.counts.get(key) ?? 0;\n  }\n\n  has(key: RollResult): boolean {\n    return this.counts.has(key);\n  }\n\n  keys(): Iterable<RollResult> {\n    return this.counts.keys();\n  }\n\n  entries(): Iterable<[RollResult, number]> {\n    return this.counts.entries();\n  }\n\n  get count(): number {\n    return this.counts.size;\n  }\n\n  get diceCount(): number {\n    return Array.from(this.counts.values()).reduce((total, current) => total + current, 0);\n  }\n\n  get dice(): RollResult[] {\n    return Array.from(this.counts.entries()).map(([roll, count]) => _.range(count).map(() => roll)).flat().sort((lhs, rhs) => {\n      return rollResults.indexOf(lhs) - rollResults.indexOf(rhs)!;\n    });\n  }\n\n  replacing(roll: RollResult, count: number): DiceRoll {\n    return this.copy().replace(roll, count);\n  }\n\n  replace(roll: RollResult, count: number): DiceRoll {\n    if (count) {\n      this.counts.set(roll, count);\n    } else if (this.has(roll)) {\n      this.counts.delete(roll);\n    }\n    return this;\n  }\n\n  limitToCount(diceCount: number): DiceRoll {\n    if (diceCount <= this.diceCount) {\n      return this;\n    }\n    const diceRoll = new DiceRoll();\n    let remainingDiceCount = diceCount;\n    for (const roll of rollResults) {\n      const rollCount = Math.min(remainingDiceCount, this.get(roll));\n      diceRoll.counts.set(roll, rollCount);\n      remainingDiceCount -= rollCount;\n    }\n    return diceRoll;\n  }\n\n  getFaces(): RollResult[] {\n    return rollResults.filter(face => this.has(face));\n  }\n\n  getOppositeFaces(): RollResult[] {\n    return rollResults.filter(face => !this.has(face));\n  }\n\n  limitToFaces(faces: RollResult[]): DiceRoll {\n    if (!faces.some(face => this.has(face))) {\n      return this;\n    }\n    const diceRoll = new DiceRoll();\n    for (const face of faces) {\n      diceRoll.replace(face, this.get(face));\n    }\n    return diceRoll;\n  }\n\n  static getNextRolls(diceCount: number): {diceRoll: DiceRoll, count: number}[] {\n    const diceRollInfoByKey: Map<string, {diceRoll: DiceRoll, count: number}> = new Map();\n\n    for (const diceRoll of DiceRoll.iterateDiceRolls(diceCount)) {\n      if (!diceRollInfoByKey.has(diceRoll.key)) {\n        diceRollInfoByKey.set(diceRoll.key, { diceRoll, count: 0 });\n      }\n      diceRollInfoByKey.get(diceRoll.key)!.count += 1;\n    }\n\n    return Array.from(diceRollInfoByKey.values());\n  }\n\n  static *iterateDiceRolls(count: number): Iterable<DiceRoll> {\n    if (!count) {\n      return;\n    }\n    function *addLayer<T>(lists: Iterable<T[]>, layer: T[]): Iterable<T[]> {\n      for (const list of lists) {\n        for (const newItem of layer) {\n          yield [...list, newItem];\n        }\n      }\n    }\n    let items: Iterable<RollResult[]> = [[]];\n    for (const _1 in _.range(count)) {\n      items = addLayer(items, rollResults);\n    }\n    for (const item of items) {\n      yield DiceRoll.fromDice(item);\n    }\n  }\n}\n","import { DiceRoll } from \"./DiceRoll\";\nimport { RollResult, Worm } from \"./RollResult\";\n\nexport class Chest {\n  diceCounts: DiceRoll;\n  hasWorms: boolean;\n\n  static initial(): Chest {\n    return new Chest(new DiceRoll(), false);\n  }\n\n  static fromDiceRoll(diceRoll: DiceRoll): Chest {\n    return new Chest(new DiceRoll(diceRoll.entries()), diceRoll.has(Worm));\n  }\n\n  static fromDice(dice: RollResult[]): Chest {\n    return this.fromDiceRoll(DiceRoll.fromDice(dice));\n  }\n\n  constructor(diceCounts: DiceRoll, hasWorms: boolean) {\n    this.diceCounts = diceCounts;\n    this.hasWorms = hasWorms;\n  }\n\n  get total(): number {\n    return this.diceCounts.total;\n  }\n\n  get diceCount(): number {\n    return this.diceCounts.diceCount;\n  }\n\n  get dice(): RollResult[] {\n    return this.diceCounts.dice;\n  }\n\n  get key(): string {\n    return this.diceCounts.key;\n  }\n\n  uniqueDice(): RollResult[] {\n    return Array.from(this.diceCounts.keys()).sort();\n  }\n\n  canAdd(roll: RollResult): boolean {\n    return !this.diceCounts.has(roll);\n  }\n\n  add(roll: RollResult, diceCount: number): Chest {\n    if (!this.canAdd(roll)) {\n      throw new Error(\"Cannot add existing dice to chest\");\n    }\n    return new Chest(\n      this.diceCounts.adding(roll, diceCount), \n      this.hasWorms || roll === Worm,\n    );\n  }\n\n  get(roll: RollResult): number {\n    return this.diceCounts.get(roll);\n  }\n\n  replacing(roll: RollResult, count: number): Chest {\n    return Chest.fromDiceRoll(this.diceCounts.replacing(roll, count));\n  }\n}\n","import _ from \"underscore\";\n\nexport type SerialisedResults = [number, number][];\nexport type CompressedSerialisedResults = [number, number, number][];\nexport interface SerialisationOptions {\n  compressed?: boolean,\n  rounded?: boolean,\n  sparse?: boolean,\n}\n\nexport class Results {\n  counts: Map<number, number>;\n\n  static deserialise(serialised: SerialisedResults | CompressedSerialisedResults, options: SerialisationOptions): Results {\n    if (options.compressed) {\n      const expandedTriples: [number, number][][] = (serialised as CompressedSerialisedResults).map(\n        ([min, max, ratio]) => _.range(min, max + 1).map(\n          (total) => [total, ratio]));\n      serialised = expandedTriples.flat();\n    }\n    if (options.rounded) {\n      serialised = serialised.map(([key, value]) => [key, (value === -1 ? 1000 : value) / 1000])\n    }\n    return new Results(serialised as SerialisedResults);\n  }\n\n  constructor(items?: Iterable<readonly [number, number]>) {\n    this.counts = new Map(items as Iterable<readonly [number, number]>);\n  }\n\n  has(key: number): boolean {\n    return this.counts.has(key);\n  }\n\n  get(key: number): number | undefined {\n    return this.counts.get(key);\n  }\n\n  set(key: number, value: number): this {\n    this.counts.set(key, value);\n    return this;\n  }\n\n  keys(): Iterable<number> {\n    return this.counts.keys();\n  }\n\n  entries(): Iterable<[number, number]> {\n    return this.counts.entries();\n  }\n\n  mergeWith(other: Results): this {\n    for (const [total, count] of other.entries()) {\n      this.set(total, (this.get(total) || 0) + count);\n    }\n    return this;\n  }\n\n  add(result: number, count: number): void {\n    this.set(result, (this.get(result) || 0) + count);\n  }\n\n  get total(): number {\n    return Array.from(this.counts.values()).reduce(\n      (total, current) => total + current,\n      0\n    );\n  }\n\n  toFixed(): Results {\n    return new Results(\n      Array.from(this.entries()).map(([key, value]: [number, number]) => {\n        if (isNaN(parseFloat(value.toFixed(6)))) {\n          throw new Error(\n            `Value was not a number, it was a ${\n              value?.constructor?.name || value\n            }: ${value}`\n          );\n        }\n        return [key, parseFloat(value.toFixed(6))] as [number, number];\n      })\n    );\n  }\n\n  serialise(options: SerialisationOptions): SerialisedResults | CompressedSerialisedResults {\n    let serialised: SerialisedResults | CompressedSerialisedResults = Array.from(this.entries());\n    if (options.rounded) {\n      serialised = serialised.map(([total, ratio]) => {\n        const value = Math.round(ratio * 1000);\n        return [total, value === 1000 ? -1 : value];\n      });\n    }\n    if (options.compressed) {\n      serialised = serialised.sort(([lTotal], [rTotal]) => lTotal - rTotal).reduce((total, [rollTotal, ratio]): [number, number, number][] => {\n        const min = rollTotal, max = rollTotal;\n        if (!total.length) {\n          return [[min, max, ratio]];\n        }\n        const [lastMin, lastMax, lastRatio] = total[total.length - 1];\n        if (lastMax !== (max - 1) || lastRatio !== ratio) {\n          return [...total, [min, max, ratio]];\n        }\n        return [...total.slice(0, total.length - 1), [lastMin, max, lastRatio]];\n      }, [] as [number, number, number][]);\n    }\n    return serialised;\n  }\n}\n","import _ from \"underscore\";\n\nimport {CompressedSerialisedResults, Results, SerialisationOptions, SerialisedResults} from \"./Results\";\n\nexport interface SerialisedEvaluation {\n  minimumResultOccurrencesEntries: SerialisedResults,\n  exactResultOccurrencesEntries: SerialisedResults,\n  expectedValueOfAtLeastEntries: SerialisedResults,\n  expectedValue: number,\n}\n\nexport interface CompressedSerialisedEvaluation {\n  minimumResultOccurrencesEntries: CompressedSerialisedResults,\n  exactResultOccurrencesEntries: SerialisedResults,\n  expectedValueOfAtLeastEntries: CompressedSerialisedResults,\n  expectedValue: number,\n}\n\nexport class Evaluation {\n  minimumResultOccurrences: Results;\n  exactResultOccurrences: Results;\n  expectedValueOfAtLeast: Results;\n  expectedValue: number;\n\n  static combineOptions(options: Evaluation[]): Evaluation {\n    const combined = this.empty();\n    let maxExpectedValue = 0;\n    for (const evaluation of options) {\n      for (const [result, count] of evaluation.minimumResultOccurrences.entries()) {\n        combined.minimumResultOccurrences.set(result, Math.max(combined.minimumResultOccurrences.get(result) || 0, count));\n      }\n      for (const [result, count] of evaluation.exactResultOccurrences.entries()) {\n        combined.exactResultOccurrences.set(result, Math.max(combined.exactResultOccurrences.get(result) || 0, count));\n      }\n      for (const [result, expectedValue] of evaluation.expectedValueOfAtLeast.entries()) {\n        combined.expectedValueOfAtLeast.set(result, Math.max(combined.expectedValueOfAtLeast.get(result) || 0, expectedValue));\n      }\n      maxExpectedValue = Math.max(maxExpectedValue, evaluation.expectedValue);\n    }\n    combined.expectedValue = maxExpectedValue;\n    return combined;\n  }\n\n  static combineProbabilities(options: {evaluation: Evaluation, ratio: number}[]): Evaluation {\n    const combined = this.empty();\n    let expectedValue = 0;\n    for (const {evaluation, ratio: evaluationRatio} of options) {\n      for (const [result, ratio] of evaluation.minimumResultOccurrences.entries()) {\n        combined.minimumResultOccurrences.set(result, (combined.minimumResultOccurrences.get(result) || 0) + ratio * evaluationRatio);\n      }\n      for (const [result, ratio] of evaluation.exactResultOccurrences.entries()) {\n        combined.exactResultOccurrences.set(result, (combined.exactResultOccurrences.get(result) || 0) + ratio * evaluationRatio);\n      }\n      for (const [result, expectedValue] of evaluation.expectedValueOfAtLeast.entries()) {\n        combined.expectedValueOfAtLeast.set(result, (combined.expectedValueOfAtLeast.get(result) || 0) + expectedValue * evaluationRatio);\n      }\n      expectedValue += evaluation.expectedValue * evaluationRatio;\n    }\n    combined.expectedValue = expectedValue;\n    return combined;\n  }\n\n  static fromTotal(total: number): Evaluation {\n    const evaluation = this.empty();\n    for (const minTotal of _.range(1, total + 1)) {\n      evaluation.minimumResultOccurrences.set(minTotal, 1);\n      evaluation.expectedValueOfAtLeast.set(minTotal, total);\n    }\n    evaluation.exactResultOccurrences.set(total, 1);\n    evaluation.expectedValue = total;\n    return evaluation;\n  }\n\n  static empty(): Evaluation {\n    return new Evaluation(new Results(), new Results(), new Results(), 0);\n  }\n\n  static deserialise(serialised: SerialisedEvaluation | CompressedSerialisedEvaluation, options: SerialisationOptions): Evaluation {\n    return new Evaluation(\n      Results.deserialise(serialised.minimumResultOccurrencesEntries, options),\n      Results.deserialise(serialised.exactResultOccurrencesEntries, _.omit(options, \"compressed\")),\n      Results.deserialise(serialised.expectedValueOfAtLeastEntries, options),\n      serialised.expectedValue,\n    );\n  }\n\n  constructor(minimumResultOccurrences: Results, exactResultOccurrences: Results, expectedValueOfAtLeast: Results, expectedValue: number) {\n    this.minimumResultOccurrences = minimumResultOccurrences;\n    this.exactResultOccurrences = exactResultOccurrences;\n    this.expectedValueOfAtLeast = expectedValueOfAtLeast;\n    this.expectedValue = expectedValue;\n  }\n\n  toFixed(): Evaluation {\n    return new Evaluation(\n      this.minimumResultOccurrences.toFixed(),\n      this.exactResultOccurrences.toFixed(),\n      this.expectedValueOfAtLeast.toFixed(),\n      parseFloat(this.expectedValue.toFixed(6)),\n    );\n  }\n\n  serialise(options: SerialisationOptions): SerialisedEvaluation | CompressedSerialisedEvaluation {\n    let expectedValue = this.expectedValue;\n    if (options.rounded) {\n      expectedValue = parseInt(expectedValue.toFixed(1), 10);\n    }\n    return {\n      minimumResultOccurrencesEntries: this.minimumResultOccurrences.serialise(options) as SerialisedResults,\n      exactResultOccurrencesEntries: this.exactResultOccurrences.serialise(_.omit(options, \"compressed\")) as SerialisedResults,\n      expectedValueOfAtLeastEntries: this.expectedValueOfAtLeast.serialise(options) as SerialisedResults,\n      expectedValue,\n    };\n  }\n}\n","import {Evaluation} from \"./Evaluation\";\nimport {RolledState} from \"./RolledState\";\nimport {UnrolledState} from \"./UnrolledState\";\nimport {UnrolledStateEvaluator} from \"./UnrolledStateEvaluator\";\nimport {EvaluationCache} from \"./EvaluationCache\";\nimport {IStateEvaluator} from \"./IStateEvaluator\";\n\ninterface NextUnrolledState {\n  unrolledState: UnrolledState;\n  evaluator: UnrolledStateEvaluator | null;\n  evaluation: Evaluation | null;\n}\n\ninterface SearchOptions {\n  removeEvaluated?: boolean,\n  evaluationCache?: EvaluationCache,\n}\n\nexport class RolledStateEvaluator implements IStateEvaluator<RolledState> {\n  state: RolledState;\n  nextUnrolledStates: NextUnrolledState[];\n  evaluation: Evaluation | null = null;\n\n  static fromRolledState(rolledState: RolledState): RolledStateEvaluator {\n    const nextUnrolledStates = rolledState.getNextUnrolledStates();\n    return new RolledStateEvaluator(\n      rolledState,\n      nextUnrolledStates.map(unrolledState => ({unrolledState, evaluator: null, evaluation: null})),\n    );\n  }\n  static getRemainingDiceCountFromCacheKey(cacheKey: string): number | null {\n    if (cacheKey[0] !== \"R\") {\n      return null;\n    }\n    const [, diceStr] = cacheKey.split(\"d\");\n    const dice = diceStr.split(\",\").map(itemStr => parseInt(itemStr, 10));\n    return dice.reduce((total, current, index) => (index % 2 === 0) ? total : (total + current), 0);\n  }\n\n  constructor(rolledState: RolledState, nextUnrolledStates: NextUnrolledState[]) {\n    this.state = rolledState;\n    this.nextUnrolledStates = nextUnrolledStates;\n  }\n\n  get finished(): boolean {\n    return this.evaluation !== null;\n  }\n\n  processAll(options?: SearchOptions): this {\n    while (this.processOne(options)) {\n      //\n    }\n    return this;\n  }\n\n  processOne(options?: SearchOptions): boolean {\n    if (this.finished) {\n      return false;\n    }\n    if (this.nestedProcessOne(options)) {\n      return true;\n    }\n    this.evaluation = this.compileEvaluation();\n    return false;\n  }\n\n  nestedProcessOne(options?: SearchOptions): boolean {\n    const {removeEvaluated = false} = options ?? {};\n    if (this.finished) {\n      return false;\n    }\n    for (const nextUnrolledState of this.nextUnrolledStates) {\n      if (nextUnrolledState.evaluation) {\n        continue;\n      }\n      if (!nextUnrolledState.evaluator) {\n        nextUnrolledState.evaluator = UnrolledStateEvaluator.fromUnrolledState(nextUnrolledState.unrolledState, false);\n        if (this.useEvaluationCache(nextUnrolledState, options)) {\n          continue;\n        }\n      }\n      nextUnrolledState.evaluator.processOne(options);\n      if (nextUnrolledState.evaluator.evaluation) {\n        nextUnrolledState.evaluation = nextUnrolledState.evaluator.evaluation;\n        this.setEvaluationCache(nextUnrolledState, options);\n        if (removeEvaluated) {\n          nextUnrolledState.evaluator = null;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  useEvaluationCache(nextUnrolledState: NextUnrolledState, options?: SearchOptions): boolean {\n    if (!nextUnrolledState.evaluator) {\n      return false;\n    }\n    const {removeEvaluated = false, evaluationCache} = options ?? {};\n    const evaluation = evaluationCache?.get(nextUnrolledState.evaluator.getCacheKey());\n    if (evaluation) {\n      nextUnrolledState.evaluation = evaluation;\n      if (removeEvaluated) {\n        nextUnrolledState.evaluator = null;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  setEvaluationCache(nextUnrolledState: NextUnrolledState, options?: SearchOptions) {\n    if (!nextUnrolledState.evaluator || !nextUnrolledState.evaluation) {\n      return;\n    }\n    const {evaluationCache} = options ?? {};\n    if (evaluationCache) {\n      evaluationCache.set(nextUnrolledState.evaluator.getCacheKey(), nextUnrolledState.evaluation);\n    }\n  }\n\n  getCacheKey(): string {\n    return [\n      \"R\",\n      `t${this.state.unrolledState.chest.total}`,\n      `c${this.state.unrolledState.chest.uniqueDice().join(\",\")}`,\n      `d${this.state.diceRoll.key}`,\n    ].join(\"\").replaceAll(/[[\\]]/g, \"\");\n  }\n\n  compileEvaluation(): Evaluation {\n    if (this.nextUnrolledStates.some(({evaluation}) => !evaluation)) {\n      throw new Error(\"Some part of the evaluation tree is not completed\");\n    }\n    return this.compilePartialEvaluation({useCached: false});\n  }\n\n  getCompletionProgress(): number {\n    if (this.finished) {\n      return 1;\n    }\n    const completedCount = this.nextUnrolledStates.reduce(\n      (total, current) => total + (current.evaluation ? 1 : (current.evaluator?.getCompletionProgress() ?? 0)), 0);\n    return completedCount / this.nextUnrolledStates.length;\n  }\n\n  compilePartialEvaluation({useCached = true}: {useCached?: boolean} = {}): Evaluation {\n    if (this.evaluation && useCached) {\n      return this.evaluation;\n    }\n    return Evaluation.combineOptions(\n      this.nextUnrolledStates\n      .filter(({evaluator, evaluation}) => evaluator || evaluation)\n      .map(({evaluator, evaluation}) => evaluation ?? evaluator!.compilePartialEvaluation())\n    );\n  }\n}\n","import {Evaluation} from \"./Evaluation\";\nimport {RolledState} from \"./RolledState\";\nimport {RolledStateEvaluator} from \"./RolledStateEvaluator\";\nimport {UnrolledState} from \"./UnrolledState\";\nimport {IStateEvaluator, SearchOptions} from \"./IStateEvaluator\";\n\ninterface NextRolledState {\n  rolledState: RolledState;\n  count: number;\n  evaluator: RolledStateEvaluator | null;\n  evaluation: Evaluation | null;\n}\n\nexport class UnrolledStateEvaluator implements IStateEvaluator<UnrolledState> {\n  state: UnrolledState;\n  nextRolledStates: NextRolledState[] | null;\n  evaluation: Evaluation | null = null;\n  isRoot: boolean;\n\n  static fromUnrolledState(unrolledState: UnrolledState, isRoot: boolean): UnrolledStateEvaluator {\n    const nextRolledStates = unrolledState.getNextRolledStates();\n    return new UnrolledStateEvaluator(\n      unrolledState,\n      nextRolledStates.map(nextRolledState => ({...nextRolledState, evaluator: null, evaluation: null})),\n      isRoot,\n    );\n  }\n\n  static fromUnrolledStateLazy(unrolledState: UnrolledState, isRoot: boolean): UnrolledStateEvaluator {\n    return new UnrolledStateEvaluator(\n      unrolledState,\n      null,\n      isRoot,\n    );\n  }\n\n  static getRemainingDiceCountFromCacheKey(cacheKey: string): number | null {\n    if (cacheKey[0] !== \"S\") {\n      return null;\n    }\n    const [, remainingDiceCountStr] = cacheKey.split(\"r\");\n    const remainingDiceCount = parseInt(remainingDiceCountStr, 10);\n    if (isNaN(remainingDiceCount)) {\n      return null;\n    }\n    return remainingDiceCount;\n  }\n\n  constructor(unrolledState: UnrolledState, nextRolledStates: NextRolledState[] | null, isRoot: boolean) {\n    this.state = unrolledState;\n    this.nextRolledStates = nextRolledStates;\n    this.isRoot = isRoot;\n  }\n\n  get finished(): boolean {\n    return this.evaluation !== null;\n  }\n\n  processAll(options?: SearchOptions): this {\n    while (this.processOne(options)) {\n      //\n    }\n    return this;\n  }\n\n  processOne(options?: SearchOptions): boolean {\n    if (this.finished) {\n      return false;\n    }\n    if (this.nestedProcessOne(options)) {\n      return true;\n    }\n    if (!this.evaluation) {\n      this.evaluation = this.compileEvaluation();\n      if (this.isRoot) {\n        this.setOwnEvaluationCache(options);\n      }\n    }\n    return false;\n  }\n\n  nestedProcessOne(options?: SearchOptions): boolean {\n    const {removeEvaluated = false} = options ?? {};\n    if (this.finished) {\n      return false;\n    }\n    if (!this.nextRolledStates) {\n      if (options?.evaluationCache) {\n        const evaluation = options.evaluationCache.get(this.getCacheKey());\n        if (evaluation) {\n          this.evaluation = evaluation;\n          return false;\n        }\n      }\n      this.nextRolledStates = this.state\n        .getNextRolledStates()\n        .map(nextRolledState => ({...nextRolledState, evaluator: null, evaluation: null}));\n    }\n    for (const nextRolledState of this.nextRolledStates) {\n      if (nextRolledState.evaluation) {\n        continue;\n      }\n      if (!nextRolledState.evaluator) {\n        nextRolledState.evaluator = RolledStateEvaluator.fromRolledState(nextRolledState.rolledState);\n        if (this.useEvaluationCache(nextRolledState, options)) {\n          continue;\n        }\n      }\n      nextRolledState.evaluator.processOne(options);\n      if (nextRolledState.evaluator.evaluation) {\n        nextRolledState.evaluation = nextRolledState.evaluator.evaluation;\n        this.setEvaluationCache(nextRolledState, options);\n        if (removeEvaluated) {\n          nextRolledState.evaluator = null;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  useEvaluationCache(nextRolledState: NextRolledState, options?: SearchOptions): boolean {\n    if (!nextRolledState.evaluator) {\n      return false;\n    }\n    const {removeEvaluated = false, evaluationCache} = options ?? {};\n    const evaluation = evaluationCache?.get(nextRolledState.evaluator.getCacheKey());\n    if (evaluation) {\n      nextRolledState.evaluation = evaluation;\n      if (removeEvaluated) {\n        nextRolledState.evaluator = null;\n      }\n      return true;\n    }\n    return false;\n  }\n\n\n  setEvaluationCache(nextRolledState: NextRolledState, options?: SearchOptions) {\n    if (!nextRolledState.evaluator || !nextRolledState.evaluation) {\n      return;\n    }\n    const {evaluationCache} = options ?? {};\n    if (evaluationCache) {\n      evaluationCache.set(nextRolledState.evaluator.getCacheKey(), nextRolledState.evaluation);\n    }\n  }\n\n  setOwnEvaluationCache(options?: SearchOptions) {\n    if (!this.evaluation) {\n      return;\n    }\n    const {evaluationCache} = options ?? {};\n    if (evaluationCache) {\n      evaluationCache.set(this.getCacheKey(), this.evaluation);\n    }\n  }\n\n  getCacheKey(): string {\n    return [\n      \"S\",\n      `t${this.state.chest.total}`,\n      `c${this.state.chest.uniqueDice().join(\",\")}`,\n      `r${this.state.remainingDiceCount}`,\n    ].join(\"\").replaceAll(/[[\\]]/g, \"\");\n  }\n\n  compileEvaluation(): Evaluation {\n    if (!this.nextRolledStates || this.nextRolledStates.some(({evaluation}) => !evaluation)) {\n      throw new Error(\"Some part of the evaluation tree is not completed\");\n    }\n    return this.compilePartialEvaluation({useCached: false});\n  }\n\n  getCompletionProgress(): number {\n    if (this.finished) {\n      return 1;\n    }\n    if (!this.nextRolledStates) {\n      return 0;\n    }\n    if (!this.nextRolledStates.length) {\n      return 1;\n    }\n    const completedCount = this.nextRolledStates.reduce(\n      (total, current) => total + (current.evaluation ? 1 : (current.evaluator?.getCompletionProgress() ?? 0)), 0);\n    return completedCount / this.nextRolledStates.length;\n  }\n\n  compilePartialEvaluation({useCached = true}: {useCached?: boolean} = {}): Evaluation {\n    if (this.evaluation && useCached) {\n      return this.evaluation;\n    }\n    if (!this.nextRolledStates) {\n      return Evaluation.empty();\n    }\n    if (!this.nextRolledStates.length) {\n      return Evaluation.fromTotal(this.state.total);\n    }\n    const nextRolledStatesWithEvaluation = this.nextRolledStates\n      .filter(({evaluator, evaluation}) => evaluator || evaluation);\n    const totalCount = nextRolledStatesWithEvaluation.reduce(\n      (total, current) => total + current.count, 0);\n    const combined = Evaluation.combineProbabilities(\n      nextRolledStatesWithEvaluation\n      .map(({evaluator, evaluation, count}) => ({\n        evaluation: evaluation ?? evaluator!.compilePartialEvaluation(),\n        ratio: count / totalCount,\n      }))\n    );\n    // Because we can choose to stop, the current total has 100% chance of happening, if it's our target\n    combined.exactResultOccurrences.set(this.state.total, 1);\n    return combined;\n  }\n}\n","import {UnrolledStateEvaluator} from \"./UnrolledStateEvaluator\";\nimport {RolledStateEvaluator} from \"./RolledStateEvaluator\";\nimport {State} from \"./State\";\nimport {Evaluation} from \"./Evaluation\";\nimport {SearchOptions} from \"./IStateEvaluator\";\n\nexport type StateEvaluator = UnrolledStateEvaluator | RolledStateEvaluator;\nexport class StateEvaluatorHelper {\n  static evaluatorFromStateLazy(state: State, isRoot: boolean): StateEvaluator {\n    switch (state.type) {\n      case \"unrolled\":\n        return UnrolledStateEvaluator.fromUnrolledStateLazy(state, isRoot);\n      case \"rolled\":\n        return RolledStateEvaluator.fromRolledState(state);\n      default:\n        throw new Error(\"Unknown state type\");\n    }\n  }\n\n  static getStateCacheKey(state: State): string {\n    return this.evaluatorFromStateLazy(state, true).getCacheKey();\n  }\n\n  static processAllFromState(state: State, options?: SearchOptions): Evaluation {\n    const evaluator = this.evaluatorFromStateLazy(state, true);\n    return evaluator.processAll(options).evaluation!;\n  }\n\n  static getRemainingDiceCountFromCacheKey(cacheKey: string): number | null {\n    return (\n      UnrolledStateEvaluator.getRemainingDiceCountFromCacheKey(cacheKey)\n      ?? RolledStateEvaluator.getRemainingDiceCountFromCacheKey(cacheKey)\n    );\n  }\n}\n","import {CompressedSerialisedEvaluation, Evaluation, SerialisedEvaluation} from \"./Evaluation\";\nimport {CompressedSerialisedResults, SerialisationOptions, SerialisedResults} from \"./Results\";\nimport {StateEvaluatorHelper} from \"./StateEvaluator\";\n\nexport interface EvaluationCacheStats {\n  hitCount: number,\n  missCount: number,\n  entryCount: number,\n}\n\nexport type SerialisedEvaluationCache = [string, SerialisedResults, SerialisedResults, SerialisedResults, number][];\nexport type CompressedSerialisedEvaluationCache = [string, CompressedSerialisedResults, SerialisedResults, CompressedSerialisedResults, number][];\n\nexport class EvaluationCache {\n  cache: Map<string, Evaluation> = new Map();\n  hitCount: number = 0;\n  missCount: number = 0;\n\n  static deserialise(serialised: SerialisedEvaluationCache | CompressedSerialisedEvaluationCache, options: SerialisationOptions): EvaluationCache {\n    const cache = new EvaluationCache();\n    for (const [key, minimumResultOccurrencesEntries, exactResultOccurrencesEntries, expectedValueOfAtLeastEntries, expectedValue] of serialised) {\n      cache.set(key, Evaluation.deserialise({\n        minimumResultOccurrencesEntries,\n        exactResultOccurrencesEntries,\n        expectedValueOfAtLeastEntries: expectedValueOfAtLeastEntries,\n        expectedValue: expectedValue,\n      } as SerialisedEvaluation | CompressedSerialisedEvaluation, options));\n    }\n    return cache;\n  }\n\n  has(key: string): boolean {\n    return this.cache.has(key);\n  }\n\n  get(key: string): Evaluation | undefined {\n    if (this.cache.has(key)) {\n      this.hitCount++;\n    } else {\n      this.missCount++;\n    }\n    return this.cache.get(key);\n  }\n\n  set(key: string, evaluation: Evaluation) {\n    this.cache.set(key, evaluation);\n  }\n\n  get size(): number {\n    return this.cache.size;\n  }\n\n  getStats(): EvaluationCacheStats {\n    return {\n      hitCount: this.hitCount,\n      missCount: this.missCount,\n      entryCount: this.cache.size,\n    };\n  }\n\n  serialise(options: SerialisationOptions): SerialisedEvaluationCache | CompressedSerialisedEvaluationCache {\n    let entries = Array.from(this.cache.entries());\n    if (options.sparse) {\n      entries = entries.filter(([key]) => {\n        const remainingDiceCount: number | null = StateEvaluatorHelper.getRemainingDiceCountFromCacheKey(key);\n        if (remainingDiceCount === null) {\n          return false;\n        }\n        return remainingDiceCount > 4;\n      });\n    }\n    return entries.map(\n      ([key, evaluation]) => {\n        const serialisedEvaluation = evaluation.serialise(options) as SerialisedEvaluation;\n        return [\n          key,\n          serialisedEvaluation.minimumResultOccurrencesEntries,\n          serialisedEvaluation.exactResultOccurrencesEntries,\n          serialisedEvaluation.expectedValueOfAtLeastEntries,\n          serialisedEvaluation.expectedValue,\n        ];\n      });\n  }\n}\n","import { Chest } from \"./Chest\";\nimport { DiceRoll } from \"./DiceRoll\";\nimport { RolledState } from \"./RolledState\";\nimport { RollResult } from \"./RollResult\";\nimport {IState} from \"./IState\";\n\nexport interface SerialisedUnrolledState {\n  chestDice: RollResult[],\n  remainingDiceCount: number,\n}\n\ntype UnrolledStateType = \"unrolled\";\n\nexport class UnrolledState implements IState {\n  type: UnrolledStateType = \"unrolled\";\n  chest: Chest;\n  remainingDiceCount: number;\n\n  static initial(): UnrolledState {\n    return new UnrolledState(Chest.initial(), 8);\n  }\n\n  static empty(): UnrolledState {\n    return new UnrolledState(Chest.initial(), 0);\n  }\n\n  static fromDice(dice: RollResult[], remainingDiceCount: number): UnrolledState {\n    return new UnrolledState(Chest.fromDice(dice), remainingDiceCount);\n  }\n\n  static deserialise(serialised: SerialisedUnrolledState): UnrolledState {\n    return UnrolledState.fromDice(serialised.chestDice, serialised.remainingDiceCount);\n  }\n\n  constructor(chest: Chest, remainingDiceCount: number) {\n    this.chest = chest;\n    this.remainingDiceCount = remainingDiceCount;\n  }\n\n  get pickedDice(): DiceRoll {\n    return this.chest.diceCounts.copy();\n  }\n\n  get rolledDice(): null {\n    return null;\n  }\n\n  get totalDiceCount(): number {\n    return this.chest.diceCount + this.remainingDiceCount;\n  }\n\n  get selectedDiceCount(): number {\n    return this.chest.diceCount;\n  }\n\n  get total(): number {\n    if (this.chest.hasWorms) {\n      return this.chest.total;\n    } else {\n      return 0;\n    }\n  }\n\n  getNextRolledStates(): {rolledState: RolledState, count: number}[] {\n    return DiceRoll.getNextRolls(this.remainingDiceCount).map(({diceRoll, count}) => ({\n      rolledState: this.withRoll(diceRoll), \n      count,\n    }));\n  }\n\n  withRoll(diceRoll: DiceRoll): RolledState {\n    return new RolledState(this, diceRoll);\n  }\n\n  canAdd(roll: RollResult): boolean {\n    return this.chest.canAdd(roll);\n  }\n\n  add(roll: RollResult, diceCount: number): UnrolledState {\n    return new UnrolledState(this.chest.add(roll, diceCount), this.remainingDiceCount - diceCount);\n  }\n\n  finished(): UnrolledState {\n    return new UnrolledState(this.chest, 0);\n  }\n\n  serialise(): SerialisedUnrolledState {\n    return {\n      chestDice: this.chest.dice,\n      remainingDiceCount: this.remainingDiceCount,\n    };\n  }\n}\n","import {DiceRoll} from \"./DiceRoll\";\nimport {RollResult} from \"./RollResult\";\nimport {UnrolledState} from \"./UnrolledState\";\nimport {IState} from \"./IState\";\n\nexport interface SerialisedRolledState {\n  chestDice: RollResult[],\n  rolledDice: RollResult[],\n}\n\ntype RolledStateType = \"rolled\";\n\nexport class RolledState implements IState {\n  type: RolledStateType = \"rolled\";\n  unrolledState: UnrolledState;\n  diceRoll: DiceRoll;\n\n  static fromDice(chestDice: RollResult[], rolledDice: RollResult[]): RolledState {\n    return new RolledState(UnrolledState.fromDice(chestDice, rolledDice.length), DiceRoll.fromDice(rolledDice));\n  }\n\n  static deserialise(serialised: SerialisedRolledState): RolledState {\n    return RolledState.fromDice(serialised.chestDice, serialised.rolledDice);\n  }\n\n  constructor(unrolledState: UnrolledState, diceRoll: DiceRoll) {\n    this.unrolledState = unrolledState;\n    this.diceRoll = diceRoll;\n  }\n\n  get pickedDice(): DiceRoll {\n    return this.unrolledState.pickedDice;\n  }\n\n  get rolledDice(): DiceRoll {\n    return this.diceRoll;\n  }\n\n  get totalDiceCount(): number {\n    return this.unrolledState.totalDiceCount;\n  }\n\n  get selectedDiceCount(): number {\n    return this.unrolledState.selectedDiceCount + this.diceRoll.diceCount;\n  }\n\n  get remainingDiceCount(): number {\n    return this.totalDiceCount - this.selectedDiceCount;\n  }\n\n  get total(): number {\n    return this.unrolledState.total;\n  }\n\n  getNextUnrolledStates(): UnrolledState[] {\n    return this.getNextUnrolledStatesAndPickedRolls().map(({state}) => state);\n  }\n\n  getNextUnrolledStatesAndPickedRolls(): {state: UnrolledState, pickedRoll: RollResult | null, pickedCount: number | null}[] {\n    const nextUnrolledStates = Array.from(this.diceRoll.entries())\n      .filter(([roll]) => this.unrolledState.canAdd(roll))\n      .map(([roll, diceCount]) => ({state: this.unrolledState.add(roll, diceCount), pickedRoll: roll, pickedCount: diceCount}));\n    if (!nextUnrolledStates.length) {\n      return [{state: this.unrolledState.finished(), pickedRoll: null, pickedCount: null}];\n    }\n    return nextUnrolledStates;\n  }\n\n  pick(pickedRoll: RollResult): UnrolledState {\n    if (!this.diceRoll.has(pickedRoll)) {\n      throw new Error(\"Face was not rolled\");\n    }\n    return this.unrolledState.add(pickedRoll, this.diceRoll.get(pickedRoll));\n  }\n\n  serialise(): SerialisedRolledState {\n    return {\n      chestDice: this.unrolledState.chest.dice,\n      rolledDice: this.rolledDice.dice,\n    };\n  }\n}\n","import * as worms from \"./worms\";\nimport {OnCacheFetchingProgress} from \"./RemoteSearch\";\n\nexport class EvaluationCacheCache {\n  evaluationCacheUrlMap: Map<number, string> = new Map([\n    [5, \"evaluation-cache-5-dice.json\"],\n    [6, \"evaluation-cache-6-dice.json\"],\n    [7, \"evaluation-cache-7-dice.json\"],\n    [8, \"evaluation-cache-8-dice.json\"],\n  ]);\n  hasFetchedEvaluationCacheMap: Map<number, boolean> = new Map();\n  // Reusable evaluation caches\n  evaluationCacheMap: Map<number, worms.EvaluationCache> = new Map();\n  onCacheFetchingProgress: OnCacheFetchingProgress | null;\n\n  constructor(onCacheFetchingProgress: OnCacheFetchingProgress | undefined | null = null) {\n    this.onCacheFetchingProgress = onCacheFetchingProgress ?? null;\n  }\n\n  async get(diceCount: number): Promise<worms.EvaluationCache> {\n    if (this.shouldFetchEvaluationCache(diceCount)) {\n      this.evaluationCacheMap.set(diceCount, (\n        await this.fetchEvaluationCache(diceCount)\n        ?? this.evaluationCacheMap.get(diceCount)\n        ?? new worms.EvaluationCache()\n      ));\n    } else if (this.shouldSetEmptyEvaluationCache(diceCount)) {\n      this.evaluationCacheMap.set(diceCount, new worms.EvaluationCache());\n    }\n    return this.evaluationCacheMap.get(diceCount)!;\n  }\n\n  getSync(diceCount: number, callback: (evaluationCache: worms.EvaluationCache) => void): worms.EvaluationCache {\n    if (this.shouldFetchEvaluationCache(diceCount)) {\n      (async () => {\n        callback(await this.get(diceCount));\n      })();\n    }\n    if (this.shouldSetEmptyEvaluationCache(diceCount)) {\n      this.evaluationCacheMap.set(diceCount, new worms.EvaluationCache());\n    }\n    return this.evaluationCacheMap.get(diceCount)!;\n  }\n\n  shouldFetchEvaluationCache(diceCount: number): boolean {\n    return (\n      !this.evaluationCacheMap.get(diceCount)?.size\n      && this.evaluationCacheUrlMap.has(diceCount)\n      && !(this.hasFetchedEvaluationCacheMap.get(diceCount) ?? false)\n    );\n  }\n\n  shouldSetEmptyEvaluationCache(diceCount: number): boolean {\n    return !this.evaluationCacheMap.has(diceCount);\n  }\n\n  async fetchEvaluationCache(diceCount: number): Promise<worms.EvaluationCache | null> {\n    const evaluationCacheUrl = this.evaluationCacheUrlMap.get(diceCount);\n    if (!evaluationCacheUrl) {\n      return null;\n    }\n    const response = await fetch(`${process.env.PUBLIC_URL}/${evaluationCacheUrl}`);\n    this.onCacheFetchingProgress?.(diceCount, \"fetching\");\n    let evaluationCache;\n    try {\n      evaluationCache = worms.EvaluationCache.deserialise(JSON.parse(await response.text()), {rounded: true, compressed: true, sparse: true});\n    } catch (e) {\n      this.onCacheFetchingProgress?.(diceCount, \"failure\");\n      console.error(\"File was not a valid cache file\");\n      return null;\n    }\n    this.hasFetchedEvaluationCacheMap.set(diceCount, true);\n    this.onCacheFetchingProgress?.(diceCount, \"success\");\n    return evaluationCache;\n  }\n\n  clear(diceCount: number): worms.EvaluationCache {\n    this.evaluationCacheMap.set(diceCount, new worms.EvaluationCache());\n    return this.evaluationCacheMap.get(diceCount)!;\n  }\n\n  set(diceCount: number, evaluationCache: worms.EvaluationCache) {\n    this.evaluationCacheMap.set(diceCount, evaluationCache);\n  }\n}\n","import {CacheFetchingStatus, SearchRequestMessage, SearchResponseMessage} from \"./RemoteSearch\";\nimport * as worms from \"./worms\";\nimport {EvaluationCacheCache} from \"./EvaluationCacheCache\";\nimport {Evaluation, SerialisedEvaluation, StateEvaluator, StateEvaluatorHelper} from \"./worms\";\n\ninterface InstanceInfo {\n  id: number,\n  stateEvaluator: worms.StateEvaluator,\n  searching: boolean,\n  evaluationCache: worms.EvaluationCache,\n}\n\nclass SearchWorker {\n  instancesById: Map<number, InstanceInfo> = new Map();\n  worker: Worker;\n  onCacheFetchingProgress = (diceCount: number, status: CacheFetchingStatus) => {\n    const matchingInstances = Array.from(this.instancesById.values())\n      .filter(instance => instance.stateEvaluator.state.totalDiceCount === diceCount);\n    for (const instance of matchingInstances) {\n      this.postMessage({\n        type: \"cache-fetching-progress\",\n        id: instance.id,\n        diceCount,\n        status,\n      });\n    }\n  };\n  evaluationCacheCache: EvaluationCacheCache = new EvaluationCacheCache(this.onCacheFetchingProgress);\n\n  static default(): SearchWorker {\n    return new SearchWorker(self as unknown as Worker);\n  }\n\n  constructor(worker: Worker) {\n    this.worker = worker;\n    this.worker.onmessage = this.onMessage;\n  }\n\n  private postMessage(message: SearchResponseMessage) {\n    this.worker.postMessage(message);\n  }\n\n  postResult(instanceId: number) {\n    if (!this.instancesById.has(instanceId)) {\n      return;\n    }\n    const instance = this.instancesById.get(instanceId)!;\n    const {stateEvaluator, searching, evaluationCache} = instance;\n    const progress = stateEvaluator.getCompletionProgress();\n    const serialisedEvaluation = stateEvaluator.compilePartialEvaluation().serialise({}) as SerialisedEvaluation;\n    this.postMessage({\n      type: \"result\",\n      id: instanceId,\n      progress,\n      searching,\n      searchFinished: progress === 1,\n      evaluation: serialisedEvaluation,\n      preRollEvaluation: (\n        instance.stateEvaluator.state.type === \"unrolled\"\n          ? serialisedEvaluation\n          : this.getEvaluation(instance, instance.stateEvaluator.state.unrolledState).serialise({}) as SerialisedEvaluation\n      ),\n      dicePickEvaluations: stateEvaluator.state.type === \"unrolled\" ? null : (\n        stateEvaluator.state.getNextUnrolledStatesAndPickedRolls()\n        .filter(({pickedRoll}) => pickedRoll !== null)\n        .map(({state, pickedRoll, pickedCount}) => {\n          return {\n            pickedRoll: pickedRoll!,\n            pickedCount: pickedCount!,\n            evaluation: this.getEvaluation(instance, state).serialise({}) as SerialisedEvaluation,\n          };\n        })\n      ),\n      cacheStats: evaluationCache.getStats(),\n    });\n  }\n\n  onMessage = ({data}: MessageEvent<SearchRequestMessage>) => {\n    switch (data.type) {\n      case \"set-state\":\n        switch (data.stateType) {\n          case \"unrolled\":\n            this.onSetUnrolledState(data.id, worms.UnrolledState.deserialise(data.state));\n            break;\n          case \"rolled\":\n            this.onSetRolledState(data.id, worms.RolledState.deserialise(data.state));\n            break;\n          default:\n            throw new Error(\"Unknown state type\");\n        }\n        break;\n      case \"step\":\n        this.onStep(data.id);\n        break;\n      case \"start\":\n        this.onStart(data.id);\n        break;\n      case \"stop\":\n        this.onStop(data.id);\n        break;\n      case \"remove\":\n        this.onRemove(data.id);\n        break;\n      case \"download-evaluation-cache\":\n        this.onDownloadEvaluationCache(data.id);\n        break;\n      case \"load-evaluation-cache\":\n        this.onLoadEvaluationCache(data.id, data.jsonSerialised);\n        break;\n      case \"clear-evaluation-cache\":\n        this.onClearEvaluationCache(data.id);\n        break;\n    }\n  };\n\n  onSetUnrolledState(instanceId: number, unrolledState: worms.UnrolledState) {\n    this.setStateEvaluator(instanceId, worms.UnrolledStateEvaluator.fromUnrolledStateLazy(unrolledState, true));\n  }\n\n  onSetRolledState(instanceId: number, rolledState: worms.RolledState) {\n    this.setStateEvaluator(instanceId, worms.RolledStateEvaluator.fromRolledState(rolledState));\n  }\n\n  setStateEvaluator(instanceId: number, stateEvaluator: StateEvaluator) {\n    this.onStop(instanceId);\n    const instance = {\n      id: instanceId,\n      stateEvaluator,\n      searching: false,\n      evaluationCache: this.evaluationCacheCache.getSync(stateEvaluator.state.totalDiceCount, evaluationCache => {\n        const instance = this.instancesById.get(instanceId);\n        if (!instance) {\n          return;\n        }\n        this.setEvaluationCache(instance, evaluationCache);\n      }),\n    };\n    this.instancesById.set(instanceId, instance);\n    this.setEvaluationCache(instance, instance.evaluationCache);\n    if (!instance.stateEvaluator.finished && !instance.searching && instance.stateEvaluator.state.remainingDiceCount <= 4) {\n      this.onStart(instance.id);\n    }\n  }\n\n  getEvaluation(instance: InstanceInfo, state: worms.State): Evaluation {\n    const cacheKey = StateEvaluatorHelper.getStateCacheKey(state);\n    if (!instance.evaluationCache.has(cacheKey) && state.remainingDiceCount <= 4) {\n      StateEvaluatorHelper.processAllFromState(state, {evaluationCache: instance.evaluationCache});\n    }\n\n    return instance.evaluationCache.get(cacheKey) ?? Evaluation.empty();\n  }\n\n  onStep(instanceId: number) {\n    if (!this.instancesById.has(instanceId)) {\n      return;\n    }\n    const {stateEvaluator, evaluationCache} = this.instancesById.get(instanceId)!;\n    stateEvaluator.processOne({removeEvaluated: true, evaluationCache});\n    this.postResult(instanceId);\n  }\n\n  onStart(instanceId: number) {\n    this.onStop(instanceId);\n    const iterator = this.makeSearch(instanceId);\n    if (!iterator) {\n      return;\n    }\n    self.setTimeout(iterator, 0);\n  }\n\n  onDownloadEvaluationCache(instanceId: number) {\n    if (!this.instancesById.has(instanceId)) {\n      return;\n    }\n    const {evaluationCache} = this.instancesById.get(instanceId)!;\n    const bytes = new TextEncoder().encode(JSON.stringify(evaluationCache.serialise({rounded: true, compressed: true, sparse: true})));\n    const blob = new Blob([bytes], {\n      type: \"application/json;charset=utf-8\",\n    });\n    const url = URL.createObjectURL(blob);\n    self.postMessage({\n      type: \"evaluation-cache-link\",\n      id: instanceId,\n      link: url,\n    });\n  }\n\n  onLoadEvaluationCache(instanceId: number, jsonSerialised: string) {\n    if (!this.instancesById.has(instanceId)) {\n      return;\n    }\n    const instance = this.instancesById.get(instanceId)!;\n    let evaluationCache;\n    try {\n      evaluationCache = worms.EvaluationCache.deserialise(JSON.parse(jsonSerialised), {rounded: true, compressed: true, sparse: true});\n    } catch (e) {\n      console.error(\"File was not a valid cache file\");\n      return;\n    }\n    this.setEvaluationCache(instance, evaluationCache);\n  }\n\n  setEvaluationCache(instance: InstanceInfo, evaluationCache: worms.EvaluationCache) {\n    this.evaluationCacheCache.set(instance.stateEvaluator.state.totalDiceCount, evaluationCache);\n    instance.evaluationCache = evaluationCache;\n    const evaluator = instance.stateEvaluator;\n    const cacheKey = evaluator.getCacheKey();\n    if (!evaluator.finished && instance.evaluationCache.has(cacheKey)) {\n      evaluator.evaluation = instance.evaluationCache.get(cacheKey)!;\n      instance.searching = true;\n    }\n    this.postResult(instance.id);\n  }\n\n  onClearEvaluationCache(instanceId: number) {\n    if (!this.instancesById.has(instanceId)) {\n      return;\n    }\n    const instance = this.instancesById.get(instanceId)!;\n    instance.evaluationCache = this.evaluationCacheCache\n      .clear(instance.stateEvaluator.state.totalDiceCount);\n    this.postResult(instanceId);\n  }\n\n  makeSearch(instanceId: number, reportInterval: number = 1000): (() => void) | null {\n    if (!this.instancesById.has(instanceId)) {\n      return null;\n    }\n    const instanceInfo = this.instancesById.get(instanceId)!;\n    instanceInfo.searching = true;\n    const iterator = () => {\n      const startTime = new Date();\n      while (instanceInfo.searching && !instanceInfo.stateEvaluator.finished) {\n        instanceInfo.stateEvaluator.processOne({removeEvaluated: true, evaluationCache: instanceInfo.evaluationCache});\n        const endTime = new Date();\n        if ((endTime.valueOf() - startTime.valueOf()) >= reportInterval) {\n          self.setTimeout(iterator, 0);\n          break;\n        }\n      }\n      this.postResult(instanceId);\n    };\n    return iterator;\n  }\n\n  onStop(instanceId: number) {\n    if (!this.instancesById.has(instanceId)) {\n      return;\n    }\n    this.instancesById.get(instanceId)!.searching = false;\n    this.postResult(instanceId);\n  }\n\n  onRemove(instanceId: number) {\n    if (!this.instancesById.has(instanceId)) {\n      return;\n    }\n    this.instancesById.get(instanceId)!.searching = false;\n    this.postResult(instanceId);\n    this.instancesById.delete(instanceId);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst worker = SearchWorker.default();\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [871], function() { return __webpack_require__(3956); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"6b4d62fe\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/probable-worms/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t956: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkprobable_worms\"] = self[\"webpackChunkprobable_worms\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(871).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["Worm","rollResults","ValueMap","Map","DiceRoll","items","_classCallCheck","counts","key","total","this","JSON","stringify","Array","from","entries","sort","reduce","_ref","_ref2","_slicedToArray","roll","count","get","_createClass","value","concat","_toConsumableArray","_this$counts$get","has","keys","size","values","current","map","_ref3","_ref4","_","flat","lhs","rhs","indexOf","copy","replace","set","delete","diceCount","_step","diceRoll","remainingDiceCount","_iterator","_createForOfIteratorHelper","s","n","done","rollCount","Math","min","err","e","f","_this","filter","face","_this2","faces","_this3","some","_step2","_iterator2","dice","Object","group","length","_step3","diceRollInfoByKey","_iterator3","iterateDiceRolls","_regeneratorRuntime","mark","_marked","addLayer","_1","_iterator6","_step6","item","wrap","_context2","prev","next","lists","layer","_iterator4","_step4","list","_iterator5","_step5","newItem","_context","t0","finish","t1","stop","abrupt","fromDice","Chest","diceCounts","hasWorms","canAdd","Error","adding","fromDiceRoll","replacing","Results","other","_step$value","result","_value$constructor","isNaN","parseFloat","toFixed","constructor","name","options","serialised","rounded","ratio","round","compressed","_ref5","_ref6","_ref9","_ref10","rollTotal","max","_total","lastMin","lastMax","lastRatio","slice","expandedTriples","_ref11","_ref12","_ref13","_ref14","Evaluation","minimumResultOccurrences","exactResultOccurrences","expectedValueOfAtLeast","expectedValue","parseInt","minimumResultOccurrencesEntries","serialise","exactResultOccurrencesEntries","expectedValueOfAtLeastEntries","combined","empty","maxExpectedValue","evaluation","_step2$value","_step3$value","_step4$value","_step5$value","evaluationRatio","_step6$value","_step7","_iterator7","_step7$value","_step8","_iterator8","_step8$value","_step9","_iterator9","minTotal","deserialise","RolledStateEvaluator","rolledState","nextUnrolledStates","state","processOne","finished","nestedProcessOne","compileEvaluation","_ref$removeEvaluated","removeEvaluated","nextUnrolledState","evaluator","UnrolledStateEvaluator","fromUnrolledState","unrolledState","useEvaluationCache","setEvaluationCache","_ref2$removeEvaluated","evaluationCache","getCacheKey","chest","uniqueDice","join","replaceAll","compilePartialEvaluation","useCached","_current$evaluator$ge","_current$evaluator","getCompletionProgress","_ref5$useCached","arguments","undefined","combineOptions","_ref7","getNextUnrolledStates","cacheKey","_cacheKey$split","split","itemStr","index","nextRolledStates","isRoot","setOwnEvaluationCache","getNextRolledStates","nextRolledState","_objectSpread","fromRolledState","_ref6$useCached","fromTotal","nextRolledStatesWithEvaluation","totalCount","combineProbabilities","_ref8","remainingDiceCountStr","StateEvaluatorHelper","type","fromUnrolledStateLazy","evaluatorFromStateLazy","processAll","_UnrolledStateEvaluat","getRemainingDiceCountFromCacheKey","EvaluationCache","cache","hitCount","missCount","entryCount","sparse","serialisedEvaluation","UnrolledState","getNextRolls","withRoll","RolledState","add","chestDice","initial","pickedDice","totalDiceCount","selectedDiceCount","getNextUnrolledStatesAndPickedRolls","pickedRoll","pickedCount","rolledDice","EvaluationCacheCache","onCacheFetchingProgress","evaluationCacheUrlMap","hasFetchedEvaluationCacheMap","evaluationCacheMap","_get","_asyncToGenerator","_callee","_yield$this$fetchEval","shouldFetchEvaluationCache","fetchEvaluationCache","t4","sent","t3","t5","t6","t2","t7","worms","t8","call","shouldSetEmptyEvaluationCache","_x","apply","callback","_callee2","_this$evaluationCache","_this$hasFetchedEvalu","_fetchEvaluationCache","_callee3","_this$onCacheFetching","_this$onCacheFetching3","evaluationCacheUrl","response","_this$onCacheFetching2","_context3","fetch","process","text","parse","console","error","_x2","SearchWorker","worker","instancesById","status","matchingInstances","instance","stateEvaluator","postMessage","id","evaluationCacheCache","onMessage","data","stateType","onSetUnrolledState","onSetRolledState","onStep","onStart","onStop","onRemove","onDownloadEvaluationCache","onLoadEvaluationCache","jsonSerialised","onClearEvaluationCache","onmessage","message","instanceId","searching","progress","searchFinished","preRollEvaluation","getEvaluation","dicePickEvaluations","cacheStats","getStats","setStateEvaluator","getSync","_instance$evaluationC","getStateCacheKey","processAllFromState","postResult","iterator","makeSearch","self","setTimeout","bytes","TextEncoder","encode","blob","Blob","url","URL","createObjectURL","link","clear","_this4","reportInterval","instanceInfo","startTime","Date","valueOf","default","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","x","__webpack_exports__","O","deferred","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","every","splice","r","d","definition","o","defineProperty","enumerable","chunkId","Promise","all","promises","u","miniCssF","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","p","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","push","bind","moreModules","runtime","pop","then"],"sourceRoot":""}