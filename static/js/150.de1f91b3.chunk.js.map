{"version":3,"file":"static/js/150.de1f91b3.chunk.js","mappings":"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","sources":["worms/RollResult.tsx","worms/DiceRoll.tsx","worms/Chest.tsx","worms/Results.tsx","worms/Evaluation.tsx","worms/EvaluationCache.tsx","worms/UnrolledState.tsx","worms/RolledState.tsx","worms/UnrolledStateEvaluator.tsx","worms/RolledStateEvaluator.tsx","EvaluationCacheCache.tsx","worker.tsx","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["export type RollResult = 1 | 2 | 3 | 4 | 5 | \"W\";\nexport const Worm: RollResult = \"W\";\nexport const rollResults: RollResult[] = [1, 2, 3, 4, 5, Worm];\nexport const ValueMap: Map<RollResult, number> = new Map([\n  [1, 1],\n  [2, 2],\n  [3, 3],\n  [4, 4],\n  [5, 5],\n  [Worm, 5],\n] as [RollResult, number][]);\n","import _ from \"underscore\";\nimport {RollResult, rollResults, ValueMap} from \"./RollResult\";\n\nexport class DiceRoll {\n  counts: Map<RollResult, number>;\n  key: string;\n  total: number;\n\n  static fromDice(dice: RollResult[]): DiceRoll {\n    return new DiceRoll(\n      Object.values(_.groupBy(dice)).map((group) => [group[0], group.length])\n    );\n  }\n\n  constructor(items?: Iterable<readonly [RollResult, number]>) {\n    this.counts = new Map(items as Iterable<readonly [RollResult, number]>);\n    this.key = JSON.stringify(Array.from(this.counts.entries()).sort());\n    this.total = Array.from(this.counts.entries()).reduce(\n      (total, [roll, count]) => total + ValueMap.get(roll)! * count,\n      0\n    );\n  }\n\n  adding(roll: RollResult, count: number): DiceRoll {\n    return new DiceRoll([\n      ...Array.from(this.counts.entries()),\n      [roll, count] as [RollResult, number],\n    ]);\n  }\n\n  copy(): DiceRoll {\n    return new DiceRoll(this.counts.entries());\n  }\n\n  get(key: RollResult): number {\n    return this.counts.get(key) ?? 0;\n  }\n\n  has(key: RollResult): boolean {\n    return this.counts.has(key);\n  }\n\n  keys(): Iterable<RollResult> {\n    return this.counts.keys();\n  }\n\n  entries(): Iterable<[RollResult, number]> {\n    return this.counts.entries();\n  }\n\n  get count(): number {\n    return this.counts.size;\n  }\n\n  get diceCount(): number {\n    return Array.from(this.counts.values()).reduce((total, current) => total + current, 0);\n  }\n\n  get dice(): RollResult[] {\n    return Array.from(this.counts.entries()).map(([roll, count]) => _.range(count).map(() => roll)).flat().sort((lhs, rhs) => {\n      return ValueMap.get(lhs)! - ValueMap.get(rhs)!;\n    });\n  }\n\n  replacing(roll: RollResult, count: number): DiceRoll {\n    return this.copy().replace(roll, count);\n  }\n\n  replace(roll: RollResult, count: number): DiceRoll {\n    if (count) {\n      this.counts.set(roll, count);\n    } else if (this.has(roll)) {\n      this.counts.delete(roll);\n    }\n    return this;\n  }\n\n  limitToCount(diceCount: number): DiceRoll {\n    if (diceCount <= this.diceCount) {\n      return this;\n    }\n    const diceRoll = new DiceRoll();\n    let remainingDiceCount = diceCount;\n    for (const roll of rollResults) {\n      const rollCount = Math.min(remainingDiceCount, this.get(roll));\n      diceRoll.counts.set(roll, rollCount);\n      remainingDiceCount -= rollCount;\n    }\n    return diceRoll;\n  }\n\n  getFaces(): RollResult[] {\n    return rollResults.filter(face => this.has(face));\n  }\n\n  getOppositeFaces(): RollResult[] {\n    return rollResults.filter(face => !this.has(face));\n  }\n\n  limitToFaces(faces: RollResult[]): DiceRoll {\n    if (!faces.some(face => this.has(face))) {\n      return this;\n    }\n    const diceRoll = new DiceRoll();\n    for (const face of faces) {\n      diceRoll.replace(face, this.get(face));\n    }\n    return diceRoll;\n  }\n\n  static getNextRolls(diceCount: number): {diceRoll: DiceRoll, count: number}[] {\n    const diceRollInfoByKey: Map<string, {diceRoll: DiceRoll, count: number}> = new Map();\n\n    for (const diceRoll of DiceRoll.iterateDiceRolls(diceCount)) {\n      if (!diceRollInfoByKey.has(diceRoll.key)) {\n        diceRollInfoByKey.set(diceRoll.key, { diceRoll, count: 0 });\n      }\n      diceRollInfoByKey.get(diceRoll.key)!.count += 1;\n    }\n\n    return Array.from(diceRollInfoByKey.values());\n  }\n\n  static *iterateDiceRolls(count: number): Iterable<DiceRoll> {\n    if (!count) {\n      return;\n    }\n    function *addLayer<T>(lists: Iterable<T[]>, layer: T[]): Iterable<T[]> {\n      for (const list of lists) {\n        for (const newItem of layer) {\n          yield [...list, newItem];\n        }\n      }\n    }\n    let items: Iterable<RollResult[]> = [[]];\n    for (const _1 in _.range(count)) {\n      items = addLayer(items, rollResults);\n    }\n    for (const item of items) {\n      yield DiceRoll.fromDice(item);\n    }\n  }\n}\n","import { DiceRoll } from \"./DiceRoll\";\nimport { RollResult, Worm } from \"./RollResult\";\n\nexport class Chest {\n  diceCounts: DiceRoll;\n  hasWorms: boolean;\n\n  static initial(): Chest {\n    return new Chest(new DiceRoll(), false);\n  }\n\n  static fromDiceRoll(diceRoll: DiceRoll): Chest {\n    return new Chest(new DiceRoll(diceRoll.entries()), diceRoll.has(Worm));\n  }\n\n  static fromDice(dice: RollResult[]): Chest {\n    return this.fromDiceRoll(DiceRoll.fromDice(dice));\n  }\n\n  constructor(diceCounts: DiceRoll, hasWorms: boolean) {\n    this.diceCounts = diceCounts;\n    this.hasWorms = hasWorms;\n  }\n\n  get total(): number {\n    return this.diceCounts.total;\n  }\n\n  get diceCount(): number {\n    return this.diceCounts.diceCount;\n  }\n\n  get dice(): RollResult[] {\n    return this.diceCounts.dice;\n  }\n\n  get key(): string {\n    return this.diceCounts.key;\n  }\n\n  uniqueDice(): RollResult[] {\n    return Array.from(this.diceCounts.keys()).sort();\n  }\n\n  canAdd(roll: RollResult): boolean {\n    return !this.diceCounts.has(roll);\n  }\n\n  add(roll: RollResult, diceCount: number): Chest {\n    if (!this.canAdd(roll)) {\n      throw new Error(\"Cannot add existing dice to chest\");\n    }\n    return new Chest(\n      this.diceCounts.adding(roll, diceCount), \n      this.hasWorms || roll === Worm,\n    );\n  }\n\n  get(roll: RollResult): number {\n    return this.diceCounts.get(roll);\n  }\n\n  replacing(roll: RollResult, count: number): Chest {\n    return Chest.fromDiceRoll(this.diceCounts.replacing(roll, count));\n  }\n}\n","import _ from \"underscore\";\n\nexport type SerialisedResults = [number, number][];\nexport type CompressedSerialisedResults = [number, number, number][];\n\nexport class Results {\n  counts: Map<number, number>;\n\n  static deserialise(serialised: SerialisedResults): Results {\n    return new Results(serialised);\n  }\n\n  static deserialiseCompressed(serialisedCompressed: CompressedSerialisedResults): Results {\n    const expandedTriples: [number, number][][] = serialisedCompressed.map(\n      ([min, max, ratio]) => _.range(min, max + 1).map(\n        (total) => [total, ratio]));\n    return new Results(expandedTriples.flat());\n  }\n\n  constructor(items?: Iterable<readonly [number, number]>) {\n    this.counts = new Map(items as Iterable<readonly [number, number]>);\n  }\n\n  get(key: number): number | undefined {\n    return this.counts.get(key);\n  }\n\n  set(key: number, value: number): this {\n    this.counts.set(key, value);\n    return this;\n  }\n\n  keys(): Iterable<number> {\n    return this.counts.keys();\n  }\n\n  entries(): Iterable<[number, number]> {\n    return this.counts.entries();\n  }\n\n  mergeWith(other: Results): this {\n    for (const [total, count] of other.entries()) {\n      this.set(total, (this.get(total) || 0) + count);\n    }\n    return this;\n  }\n\n  add(result: number, count: number): void {\n    this.set(result, (this.get(result) || 0) + count);\n  }\n\n  get total(): number {\n    return Array.from(this.counts.values()).reduce(\n      (total, current) => total + current,\n      0\n    );\n  }\n\n  toFixed(): Results {\n    return new Results(\n      Array.from(this.entries()).map(([key, value]: [number, number]) => {\n        if (isNaN(parseFloat(value.toFixed(6)))) {\n          throw new Error(\n            `Value was not a number, it was a ${\n              value?.constructor?.name || value\n            }: ${value}`\n          );\n        }\n        return [key, parseFloat(value.toFixed(6))] as [number, number];\n      })\n    );\n  }\n\n  serialise(): SerialisedResults {\n    return Array.from(this.entries())\n  }\n\n  serialiseCompressed(): CompressedSerialisedResults {\n    return this.serialise().sort(([lTotal], [rTotal]) => lTotal - rTotal).reduce((total, [rollTotal, ratio]): [number, number, number][] => {\n      const min = rollTotal, max = rollTotal;\n      if (!total.length) {\n        return [[min, max, ratio]];\n      }\n      const [lastMin, lastMax, lastRatio] = total[total.length - 1];\n      if (lastMax !== (max - 1) || lastRatio !== ratio) {\n        return [...total, [min, max, ratio]];\n      }\n      return [...total.slice(0, total.length - 1), [lastMin, max, lastRatio]];\n    }, [] as [number, number, number][]);\n  }\n}\n","import _ from \"underscore\";\n\nimport {CompressedSerialisedResults, Results, SerialisedResults} from \"./Results\";\n\nexport interface SerialisedEvaluation {\n  minimumResultOccurrencesEntries: SerialisedResults,\n  exactResultOccurrencesEntries: SerialisedResults,\n  expectedValue: number,\n}\n\nexport interface CompressedSerialisedEvaluation {\n  minimumResultOccurrencesEntries: CompressedSerialisedResults,\n  exactResultOccurrencesEntries: SerialisedResults,\n  expectedValue: number,\n}\n\nexport class Evaluation {\n  minimumResultOccurrences: Results;\n  exactResultOccurrences: Results;\n  expectedValue: number;\n\n  static combineOptions(options: Evaluation[]): Evaluation {\n    const combined = this.empty();\n    let maxExpectedValue = 0;\n    for (const evaluation of options) {\n      for (const [result, count] of evaluation.minimumResultOccurrences.entries()) {\n        combined.minimumResultOccurrences.set(result, Math.max(combined.minimumResultOccurrences.get(result) || 0, count));\n      }\n      for (const [result, count] of evaluation.exactResultOccurrences.entries()) {\n        combined.exactResultOccurrences.set(result, Math.max(combined.exactResultOccurrences.get(result) || 0, count));\n      }\n      maxExpectedValue = Math.max(maxExpectedValue, evaluation.expectedValue);\n    }\n    combined.expectedValue = maxExpectedValue;\n    return combined;\n  }\n\n  static combineProbabilities(options: {evaluation: Evaluation, ratio: number}[]): Evaluation {\n    const combined = this.empty();\n    let expectedValue = 0;\n    for (const {evaluation, ratio: evaluationRatio} of options) {\n      for (const [result, ratio] of evaluation.minimumResultOccurrences.entries()) {\n        combined.minimumResultOccurrences.set(result, (combined.minimumResultOccurrences.get(result) || 0) + ratio * evaluationRatio);\n      }\n      for (const [result, ratio] of evaluation.exactResultOccurrences.entries()) {\n        combined.exactResultOccurrences.set(result, (combined.exactResultOccurrences.get(result) || 0) + ratio * evaluationRatio);\n      }\n      expectedValue += evaluation.expectedValue * evaluationRatio;\n    }\n    combined.expectedValue = expectedValue;\n    return combined;\n  }\n\n  static fromTotal(total: number): Evaluation {\n    const evaluation = this.empty();\n    for (const minTotal of _.range(1, total + 1)) {\n      evaluation.minimumResultOccurrences.set(minTotal, 1);\n    }\n    evaluation.exactResultOccurrences.set(total, 1);\n    evaluation.expectedValue = total;\n    return evaluation;\n  }\n\n  static empty(): Evaluation {\n    return new Evaluation(new Results(), new Results(), 0);\n  }\n\n  static deserialise(serialised: SerialisedEvaluation): Evaluation {\n    return new Evaluation(\n      Results.deserialise(serialised.minimumResultOccurrencesEntries),\n      Results.deserialise(serialised.exactResultOccurrencesEntries),\n      serialised.expectedValue ?? 0,\n    );\n  }\n\n  static deserialiseCompressed(serialised: CompressedSerialisedEvaluation): Evaluation {\n    return new Evaluation(\n      Results.deserialiseCompressed(serialised.minimumResultOccurrencesEntries),\n      Results.deserialise(serialised.exactResultOccurrencesEntries),\n      serialised.expectedValue ?? 0,\n    );\n  }\n\n  constructor(minimumResultOccurrences: Results, exactResultOccurrences: Results, expectedValue: number) {\n    this.minimumResultOccurrences = minimumResultOccurrences;\n    this.exactResultOccurrences = exactResultOccurrences;\n    this.expectedValue = expectedValue;\n  }\n\n  toFixed(): Evaluation {\n    return new Evaluation(\n      this.minimumResultOccurrences.toFixed(),\n      this.exactResultOccurrences.toFixed(),\n      parseFloat(this.expectedValue.toFixed(6)),\n    );\n  }\n\n  serialise(): SerialisedEvaluation {\n    return {\n      minimumResultOccurrencesEntries: this.minimumResultOccurrences.serialise(),\n      exactResultOccurrencesEntries: this.exactResultOccurrences.serialise(),\n      expectedValue: this.expectedValue,\n    };\n  }\n\n  serialiseCompressed(): CompressedSerialisedEvaluation {\n    return {\n      minimumResultOccurrencesEntries: this.minimumResultOccurrences.serialiseCompressed(),\n      exactResultOccurrencesEntries: this.exactResultOccurrences.serialise(),\n      expectedValue: this.expectedValue,\n    };\n  }\n}\n","import {Evaluation} from \"./Evaluation\";\nimport {CompressedSerialisedResults, SerialisedResults} from \"./Results\";\n\nexport interface EvaluationCacheStats {\n  hitCount: number,\n  missCount: number,\n  entryCount: number,\n}\n\nexport type SerialisedEvaluationCache = [string, SerialisedResults, SerialisedResults, number][];\nexport type CompressedSerialisedEvaluationCache = [string, CompressedSerialisedResults, SerialisedResults, number][];\n\nexport class EvaluationCache {\n  cache: Map<string, Evaluation> = new Map();\n  hitCount: number = 0;\n  missCount: number = 0;\n\n  static deserialise(serialised: SerialisedEvaluationCache): EvaluationCache {\n    const cache = new EvaluationCache();\n    for (const [key, minimumResultOccurrencesEntries, exactResultOccurrencesEntries, expectedValue] of serialised) {\n      cache.set(key, Evaluation.deserialise({\n        minimumResultOccurrencesEntries,\n        exactResultOccurrencesEntries,\n        expectedValue: expectedValue ?? 0,\n      }));\n    }\n    return cache;\n  }\n\n  static deserialiseCompressed(serialised: CompressedSerialisedEvaluationCache): EvaluationCache {\n    const cache = new EvaluationCache();\n    for (const [key, minimumResultOccurrencesEntries, exactResultOccurrencesEntries, expectedValue] of serialised) {\n      cache.set(key, Evaluation.deserialiseCompressed({\n        minimumResultOccurrencesEntries,\n        exactResultOccurrencesEntries,\n        expectedValue: expectedValue ?? 0,\n      }));\n    }\n    return cache;\n  }\n\n  has(key: string): boolean {\n    return this.cache.has(key);\n  }\n\n  get(key: string): Evaluation | undefined {\n    if (this.cache.has(key)) {\n      this.hitCount++;\n    } else {\n      this.missCount++;\n    }\n    return this.cache.get(key);\n  }\n\n  set(key: string, evaluation: Evaluation) {\n    this.cache.set(key, evaluation);\n  }\n\n  get size(): number {\n    return this.cache.size;\n  }\n\n  getStats(): EvaluationCacheStats {\n    return {\n      hitCount: this.hitCount,\n      missCount: this.missCount,\n      entryCount: this.cache.size,\n    };\n  }\n\n  serialise(): SerialisedEvaluationCache {\n    return Array.from(this.cache.entries()).map(\n      ([key, evaluation]) => {\n        const serialisedEvaluation = evaluation.serialise();\n        return [\n          key,\n          serialisedEvaluation.minimumResultOccurrencesEntries,\n          serialisedEvaluation.exactResultOccurrencesEntries,\n          serialisedEvaluation.expectedValue,\n        ];\n      });\n  }\n\n  serialiseCompressed(): CompressedSerialisedEvaluationCache {\n    return Array.from(this.cache.entries()).map(\n      ([key, evaluation]) => {\n        const serialisedEvaluation = evaluation.serialiseCompressed();\n        return [\n          key,\n          serialisedEvaluation.minimumResultOccurrencesEntries,\n          serialisedEvaluation.exactResultOccurrencesEntries,\n          serialisedEvaluation.expectedValue,\n        ];\n      });\n  }\n}\n","import { Chest } from \"./Chest\";\nimport { DiceRoll } from \"./DiceRoll\";\nimport { RolledState } from \"./RolledState\";\nimport { RollResult } from \"./RollResult\";\nimport {IState} from \"./IState\";\n\nexport interface SerialisedUnrolledState {\n  chestDice: RollResult[],\n  remainingDiceCount: number,\n}\n\ntype UnrolledStateType = \"unrolled\";\n\nexport class UnrolledState implements IState {\n  type: UnrolledStateType = \"unrolled\";\n  chest: Chest;\n  remainingDiceCount: number;\n\n  static initial(): UnrolledState {\n    return new UnrolledState(Chest.initial(), 8);\n  }\n\n  static empty(): UnrolledState {\n    return new UnrolledState(Chest.initial(), 0);\n  }\n\n  static fromDice(dice: RollResult[], remainingDiceCount: number): UnrolledState {\n    return new UnrolledState(Chest.fromDice(dice), remainingDiceCount);\n  }\n\n  static deserialise(serialised: SerialisedUnrolledState): UnrolledState {\n    return UnrolledState.fromDice(serialised.chestDice, serialised.remainingDiceCount);\n  }\n\n  constructor(chest: Chest, remainingDiceCount: number) {\n    this.chest = chest;\n    this.remainingDiceCount = remainingDiceCount;\n  }\n\n  get pickedDice(): DiceRoll {\n    return this.chest.diceCounts.copy();\n  }\n\n  get rolledDice(): null {\n    return null;\n  }\n\n  get totalDiceCount(): number {\n    return this.chest.diceCount + this.remainingDiceCount;\n  }\n\n  get selectedDiceCount(): number {\n    return this.chest.diceCount;\n  }\n\n  get total(): number {\n    if (this.chest.hasWorms) {\n      return this.chest.total;\n    } else {\n      return 0;\n    }\n  }\n\n  getNextRolledStates(): {rolledState: RolledState, count: number}[] {\n    return DiceRoll.getNextRolls(this.remainingDiceCount).map(({diceRoll, count}) => ({\n      rolledState: this.withRoll(diceRoll), \n      count,\n    }));\n  }\n\n  withRoll(diceRoll: DiceRoll): RolledState {\n    return new RolledState(this, diceRoll);\n  }\n\n  canAdd(roll: RollResult): boolean {\n    return this.chest.canAdd(roll);\n  }\n\n  add(roll: RollResult, diceCount: number): UnrolledState {\n    return new UnrolledState(this.chest.add(roll, diceCount), this.remainingDiceCount - diceCount);\n  }\n\n  finished(): UnrolledState {\n    return new UnrolledState(this.chest, 0);\n  }\n\n  serialise(): SerialisedUnrolledState {\n    return {\n      chestDice: this.chest.dice,\n      remainingDiceCount: this.remainingDiceCount,\n    };\n  }\n}\n","import {DiceRoll} from \"./DiceRoll\";\nimport {RollResult} from \"./RollResult\";\nimport {UnrolledState} from \"./UnrolledState\";\nimport {IState} from \"./IState\";\n\nexport interface SerialisedRolledState {\n  chestDice: RollResult[],\n  rolledDice: RollResult[],\n}\n\ntype RolledStateType = \"rolled\";\n\nexport class RolledState implements IState {\n  type: RolledStateType = \"rolled\";\n  unrolledState: UnrolledState;\n  diceRoll: DiceRoll;\n\n  static fromDice(chestDice: RollResult[], rolledDice: RollResult[]): RolledState {\n    return new RolledState(UnrolledState.fromDice(chestDice, rolledDice.length), DiceRoll.fromDice(rolledDice));\n  }\n\n  static deserialise(serialised: SerialisedRolledState): RolledState {\n    return RolledState.fromDice(serialised.chestDice, serialised.rolledDice);\n  }\n\n  constructor(unrolledState: UnrolledState, diceRoll: DiceRoll) {\n    this.unrolledState = unrolledState;\n    this.diceRoll = diceRoll;\n  }\n\n  get pickedDice(): DiceRoll {\n    return this.unrolledState.pickedDice;\n  }\n\n  get rolledDice(): DiceRoll {\n    return this.diceRoll;\n  }\n\n  get totalDiceCount(): number {\n    return this.unrolledState.totalDiceCount;\n  }\n\n  get selectedDiceCount(): number {\n    return this.unrolledState.selectedDiceCount + this.diceRoll.diceCount;\n  }\n\n  get total(): number {\n    return this.unrolledState.total;\n  }\n\n  getNextUnrolledStates(): UnrolledState[] {\n    const nextUnrolledStates = Array.from(this.diceRoll.entries())\n      .filter(([roll]) => this.unrolledState.canAdd(roll))\n      .map(([roll, diceCount]) => this.unrolledState.add(roll, diceCount));\n    if (!nextUnrolledStates.length) {\n      return [this.unrolledState.finished()];\n    }\n    return nextUnrolledStates;\n  }\n\n  serialise(): SerialisedRolledState {\n    return {\n      chestDice: this.unrolledState.chest.dice,\n      rolledDice: this.rolledDice.dice,\n    };\n  }\n}\n","import {Evaluation} from \"./Evaluation\";\nimport {RolledState} from \"./RolledState\";\nimport {RolledStateEvaluator} from \"./RolledStateEvaluator\";\nimport {UnrolledState} from \"./UnrolledState\";\nimport {IStateEvaluator, SearchOptions} from \"./IStateEvaluator\";\n\ninterface NextRolledState {\n  rolledState: RolledState;\n  count: number;\n  evaluator: RolledStateEvaluator | null;\n  evaluation: Evaluation | null;\n}\n\nexport class UnrolledStateEvaluator implements IStateEvaluator<UnrolledState> {\n  state: UnrolledState;\n  nextRolledStates: NextRolledState[] | null;\n  evaluation: Evaluation | null = null;\n  isRoot: boolean;\n\n  static fromUnrolledState(unrolledState: UnrolledState, isRoot: boolean): UnrolledStateEvaluator {\n    const nextRolledStates = unrolledState.getNextRolledStates();\n    return new UnrolledStateEvaluator(\n      unrolledState,\n      nextRolledStates.map(nextRolledState => ({...nextRolledState, evaluator: null, evaluation: null})),\n      isRoot,\n    );\n  }\n\n  static fromUnrolledStateLazy(unrolledState: UnrolledState, isRoot: boolean): UnrolledStateEvaluator {\n    return new UnrolledStateEvaluator(\n      unrolledState,\n      null,\n      isRoot,\n    );\n  }\n\n  constructor(unrolledState: UnrolledState, nextRolledStates: NextRolledState[] | null, isRoot: boolean) {\n    this.state = unrolledState;\n    this.nextRolledStates = nextRolledStates;\n    this.isRoot = isRoot;\n  }\n\n  get finished(): boolean {\n    return this.evaluation !== null;\n  }\n\n  processAll(): this {\n    while (this.processOne()) {\n      //\n    }\n    return this;\n  }\n\n  processOne(options?: SearchOptions): boolean {\n    if (this.finished) {\n      return false;\n    }\n    if (this.nestedProcessOne(options)) {\n      return true;\n    }\n    if (!this.evaluation) {\n      this.evaluation = this.compileEvaluation();\n      if (this.isRoot) {\n        this.setOwnEvaluationCache(options);\n      }\n    }\n    return false;\n  }\n\n  nestedProcessOne(options?: SearchOptions): boolean {\n    const {removeEvaluated = false} = options ?? {};\n    if (this.finished) {\n      return false;\n    }\n    if (!this.nextRolledStates) {\n      if (options?.evaluationCache) {\n        const evaluation = options.evaluationCache.get(this.getCacheKey());\n        if (evaluation) {\n          this.evaluation = evaluation;\n          return false;\n        }\n      }\n      this.nextRolledStates = this.state\n        .getNextRolledStates()\n        .map(nextRolledState => ({...nextRolledState, evaluator: null, evaluation: null}));\n    }\n    for (const nextRolledState of this.nextRolledStates) {\n      if (nextRolledState.evaluation) {\n        continue;\n      }\n      if (!nextRolledState.evaluator) {\n        nextRolledState.evaluator = RolledStateEvaluator.fromRolledState(nextRolledState.rolledState);\n        if (this.useEvaluationCache(nextRolledState, options)) {\n          continue;\n        }\n      }\n      nextRolledState.evaluator.processOne(options);\n      if (nextRolledState.evaluator.evaluation) {\n        nextRolledState.evaluation = nextRolledState.evaluator.evaluation;\n        this.setEvaluationCache(nextRolledState, options);\n        if (removeEvaluated) {\n          nextRolledState.evaluator = null;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  useEvaluationCache(nextRolledState: NextRolledState, options?: SearchOptions): boolean {\n    if (!nextRolledState.evaluator) {\n      return false;\n    }\n    const {removeEvaluated = false, evaluationCache} = options ?? {};\n    const evaluation = evaluationCache?.get(nextRolledState.evaluator.getCacheKey());\n    if (evaluation) {\n      nextRolledState.evaluation = evaluation;\n      if (removeEvaluated) {\n        nextRolledState.evaluator = null;\n      }\n      return true;\n    }\n    return false;\n  }\n\n\n  setEvaluationCache(nextRolledState: NextRolledState, options?: SearchOptions) {\n    if (!nextRolledState.evaluator || !nextRolledState.evaluation) {\n      return;\n    }\n    const {evaluationCache} = options ?? {};\n    if (evaluationCache) {\n      evaluationCache.set(nextRolledState.evaluator.getCacheKey(), nextRolledState.evaluation);\n    }\n  }\n\n  setOwnEvaluationCache(options?: SearchOptions) {\n    if (!this.evaluation) {\n      return;\n    }\n    const {evaluationCache} = options ?? {};\n    if (evaluationCache) {\n      evaluationCache.set(this.getCacheKey(), this.evaluation);\n    }\n  }\n\n  getCacheKey(): string {\n    return [\n      \"S\",\n      `t${this.state.chest.total}`,\n      `c${this.state.chest.uniqueDice().join(\",\")}`,\n      `r${this.state.remainingDiceCount}`,\n    ].join(\"\").replaceAll(/[[\\]]/g, \"\");\n  }\n\n  compileEvaluation(): Evaluation {\n    if (!this.nextRolledStates || this.nextRolledStates.some(({evaluation}) => !evaluation)) {\n      throw new Error(\"Some part of the evaluation tree is not completed\");\n    }\n    return this.compilePartialEvaluation({useCached: false});\n  }\n\n  getCompletionProgress(): number {\n    if (this.finished) {\n      return 1;\n    }\n    if (!this.nextRolledStates) {\n      return 0;\n    }\n    if (!this.nextRolledStates.length) {\n      return 1;\n    }\n    const completedCount = this.nextRolledStates.reduce(\n      (total, current) => total + (current.evaluation ? 1 : (current.evaluator?.getCompletionProgress() ?? 0)), 0);\n    return completedCount / this.nextRolledStates.length;\n  }\n\n  compilePartialEvaluation({useCached = true}: {useCached?: boolean} = {}): Evaluation {\n    if (this.evaluation && useCached) {\n      return this.evaluation;\n    }\n    if (!this.nextRolledStates) {\n      return Evaluation.empty();\n    }\n    if (!this.nextRolledStates.length) {\n      return Evaluation.fromTotal(this.state.total);\n    }\n    const nextRolledStatesWithEvaluation = this.nextRolledStates\n      .filter(({evaluator, evaluation}) => evaluator || evaluation);\n    const totalCount = nextRolledStatesWithEvaluation.reduce(\n      (total, current) => total + current.count, 0);\n    const combined = Evaluation.combineProbabilities(\n      nextRolledStatesWithEvaluation\n      .map(({evaluator, evaluation, count}) => ({\n        evaluation: evaluation ?? evaluator!.compilePartialEvaluation(),\n        ratio: count / totalCount,\n      }))\n    );\n    // Because we can choose to stop, the current total has 100% chance of happening, if it's our target\n    combined.exactResultOccurrences.set(this.state.total, 1);\n    return combined;\n  }\n}\n","import {Evaluation} from \"./Evaluation\";\nimport {RolledState} from \"./RolledState\";\nimport {UnrolledState} from \"./UnrolledState\";\nimport {UnrolledStateEvaluator} from \"./UnrolledStateEvaluator\";\nimport {EvaluationCache} from \"./EvaluationCache\";\nimport {IStateEvaluator} from \"./IStateEvaluator\";\n\ninterface NextUnrolledState {\n  unrolledState: UnrolledState;\n  evaluator: UnrolledStateEvaluator | null;\n  evaluation: Evaluation | null;\n}\n\ninterface SearchOptions {\n  removeEvaluated?: boolean,\n  evaluationCache?: EvaluationCache,\n}\n\nexport class RolledStateEvaluator implements IStateEvaluator<RolledState> {\n  state: RolledState;\n  nextUnrolledStates: NextUnrolledState[];\n  evaluation: Evaluation | null = null;\n\n  static fromRolledState(rolledState: RolledState): RolledStateEvaluator {\n    const nextUnrolledStates = rolledState.getNextUnrolledStates();\n    return new RolledStateEvaluator(\n      rolledState,\n      nextUnrolledStates.map(unrolledState => ({unrolledState, evaluator: null, evaluation: null})),\n    );\n  }\n\n  constructor(rolledState: RolledState, nextUnrolledStates: NextUnrolledState[]) {\n    this.state = rolledState;\n    this.nextUnrolledStates = nextUnrolledStates;\n  }\n\n  get finished(): boolean {\n    return this.evaluation !== null;\n  }\n\n  processAll(): this {\n    while (this.processOne()) {\n      //\n    }\n    return this;\n  }\n\n  processOne(options?: SearchOptions): boolean {\n    if (this.finished) {\n      return false;\n    }\n    if (this.nestedProcessOne(options)) {\n      return true;\n    }\n    this.evaluation = this.compileEvaluation();\n    return false;\n  }\n\n  nestedProcessOne(options?: SearchOptions): boolean {\n    const {removeEvaluated = false} = options ?? {};\n    if (this.finished) {\n      return false;\n    }\n    for (const nextUnrolledState of this.nextUnrolledStates) {\n      if (nextUnrolledState.evaluation) {\n        continue;\n      }\n      if (!nextUnrolledState.evaluator) {\n        nextUnrolledState.evaluator = UnrolledStateEvaluator.fromUnrolledState(nextUnrolledState.unrolledState, false);\n        if (this.useEvaluationCache(nextUnrolledState, options)) {\n          continue;\n        }\n      }\n      nextUnrolledState.evaluator.processOne(options);\n      if (nextUnrolledState.evaluator.evaluation) {\n        nextUnrolledState.evaluation = nextUnrolledState.evaluator.evaluation;\n        this.setEvaluationCache(nextUnrolledState, options);\n        if (removeEvaluated) {\n          nextUnrolledState.evaluator = null;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  useEvaluationCache(nextUnrolledState: NextUnrolledState, options?: SearchOptions): boolean {\n    if (!nextUnrolledState.evaluator) {\n      return false;\n    }\n    const {removeEvaluated = false, evaluationCache} = options ?? {};\n    const evaluation = evaluationCache?.get(nextUnrolledState.evaluator.getCacheKey());\n    if (evaluation) {\n      nextUnrolledState.evaluation = evaluation;\n      if (removeEvaluated) {\n        nextUnrolledState.evaluator = null;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  setEvaluationCache(nextUnrolledState: NextUnrolledState, options?: SearchOptions) {\n    if (!nextUnrolledState.evaluator || !nextUnrolledState.evaluation) {\n      return;\n    }\n    const {evaluationCache} = options ?? {};\n    if (evaluationCache) {\n      evaluationCache.set(nextUnrolledState.evaluator.getCacheKey(), nextUnrolledState.evaluation);\n    }\n  }\n\n  getCacheKey(): string {\n    return [\n      \"R\",\n      `t${this.state.unrolledState.chest.total}`,\n      `c${this.state.unrolledState.chest.uniqueDice().join(\",\")}`,\n      `d${this.state.diceRoll.key}`,\n    ].join(\"\").replaceAll(/[[\\]]/g, \"\");\n  }\n\n  compileEvaluation(): Evaluation {\n    if (this.nextUnrolledStates.some(({evaluation}) => !evaluation)) {\n      throw new Error(\"Some part of the evaluation tree is not completed\");\n    }\n    return this.compilePartialEvaluation({useCached: false});\n  }\n\n  getCompletionProgress(): number {\n    if (this.finished) {\n      return 1;\n    }\n    const completedCount = this.nextUnrolledStates.reduce(\n      (total, current) => total + (current.evaluation ? 1 : (current.evaluator?.getCompletionProgress() ?? 0)), 0);\n    return completedCount / this.nextUnrolledStates.length;\n  }\n\n  compilePartialEvaluation({useCached = true}: {useCached?: boolean} = {}): Evaluation {\n    if (this.evaluation && useCached) {\n      return this.evaluation;\n    }\n    return Evaluation.combineOptions(\n      this.nextUnrolledStates\n      .filter(({evaluator, evaluation}) => evaluator || evaluation)\n      .map(({evaluator, evaluation}) => evaluation ?? evaluator!.compilePartialEvaluation())\n    );\n  }\n}\n","import * as worms from \"./worms\";\n\nexport class EvaluationCacheCache {\n  evaluationCacheUrlMap: Map<number, string> = new Map([\n    [5, \"evaluation-cache-5-dice.json\"],\n    [6, \"evaluation-cache-6-dice.json\"],\n    [7, \"evaluation-cache-7-dice.json\"],\n    [8, \"evaluation-cache-8-dice.json\"],\n  ]);\n  hasFetchedEvaluationCacheMap: Map<number, boolean> = new Map();\n  // Reusable evaluation caches\n  evaluationCacheMap: Map<number, worms.EvaluationCache> = new Map();\n\n  async get(diceCount: number): Promise<worms.EvaluationCache> {\n    if (this.shouldFetchEvaluationCache(diceCount)) {\n      this.evaluationCacheMap.set(diceCount, (\n        await this.fetchEvaluationCache(diceCount)\n        ?? this.evaluationCacheMap.get(diceCount)\n        ?? new worms.EvaluationCache()\n      ));\n    } else if (this.shouldSetEmptyEvaluationCache(diceCount)) {\n      this.evaluationCacheMap.set(diceCount, new worms.EvaluationCache());\n    }\n    return this.evaluationCacheMap.get(diceCount)!;\n  }\n\n  getSync(diceCount: number, callback: (evaluationCache: worms.EvaluationCache) => void): worms.EvaluationCache {\n    if (this.shouldFetchEvaluationCache(diceCount)) {\n      (async () => {\n        callback(await this.get(diceCount));\n      })();\n    }\n    if (this.shouldSetEmptyEvaluationCache(diceCount)) {\n      this.evaluationCacheMap.set(diceCount, new worms.EvaluationCache());\n    }\n    return this.evaluationCacheMap.get(diceCount)!;\n  }\n\n  shouldFetchEvaluationCache(diceCount: number): boolean {\n    return (\n      !this.evaluationCacheMap.get(diceCount)?.size\n      && this.evaluationCacheUrlMap.has(diceCount)\n      && !(this.hasFetchedEvaluationCacheMap.get(diceCount) ?? false)\n    );\n  }\n\n  shouldSetEmptyEvaluationCache(diceCount: number): boolean {\n    return !this.evaluationCacheMap.has(diceCount);\n  }\n\n  async fetchEvaluationCache(diceCount: number): Promise<worms.EvaluationCache | null> {\n    const evaluationCacheUrl = this.evaluationCacheUrlMap.get(diceCount);\n    if (!evaluationCacheUrl) {\n      return null;\n    }\n    const response = await fetch(`${process.env.PUBLIC_URL}/${evaluationCacheUrl}`);\n    let evaluationCache;\n    try {\n      evaluationCache = worms.EvaluationCache.deserialiseCompressed(JSON.parse(await response.text()));\n    } catch (e) {\n      console.error(\"File was not a valid cache file\");\n      return null;\n    }\n    this.hasFetchedEvaluationCacheMap.set(diceCount, true);\n    return evaluationCache;\n  }\n\n  clear(diceCount: number): worms.EvaluationCache {\n    this.evaluationCacheMap.set(diceCount, new worms.EvaluationCache());\n    return this.evaluationCacheMap.get(diceCount)!;\n  }\n\n  set(diceCount: number, evaluationCache: worms.EvaluationCache) {\n    this.evaluationCacheMap.set(diceCount, evaluationCache);\n  }\n}\n","import {SearchRequestMessage, SearchResponseMessage} from \"./RemoteSearch\";\nimport * as worms from \"./worms\";\nimport {EvaluationCacheCache} from \"./EvaluationCacheCache\";\nimport {StateEvaluator} from \"./worms\";\n\ninterface InstanceInfo {\n  id: number,\n  stateEvaluator: worms.StateEvaluator,\n  searching: boolean,\n  evaluationCache: worms.EvaluationCache,\n}\n\nclass SearchWorker {\n  instancesById: Map<number, InstanceInfo> = new Map();\n  worker: Worker;\n  evaluationCacheCache: EvaluationCacheCache = new EvaluationCacheCache();\n\n  static default(): SearchWorker {\n    return new SearchWorker(self as unknown as Worker);\n  }\n\n  constructor(worker: Worker) {\n    this.worker = worker;\n    this.worker.onmessage = this.onMessage;\n  }\n\n  private postMessage(message: SearchResponseMessage) {\n    this.worker.postMessage(message);\n  }\n\n  postResult(instanceId: number) {\n    if (!this.instancesById.has(instanceId)) {\n      return;\n    }\n    const {stateEvaluator, searching, evaluationCache} = this.instancesById.get(instanceId)!;\n    const progress = stateEvaluator.getCompletionProgress();\n    this.postMessage({\n      type: \"result\",\n      id: instanceId,\n      progress,\n      searching,\n      searchFinished: progress === 1,\n      evaluation: stateEvaluator.compilePartialEvaluation().serialise(),\n      cacheStats: evaluationCache.getStats(),\n    });\n  }\n\n  onMessage = ({data}: MessageEvent<SearchRequestMessage>) => {\n    switch (data.type) {\n      case \"set-state\":\n        switch (data.stateType) {\n          case \"unrolled\":\n            this.onSetUnrolledState(data.id, worms.UnrolledState.deserialise(data.state));\n            break;\n          case \"rolled\":\n            this.onSetRolledState(data.id, worms.RolledState.deserialise(data.state));\n            break;\n          default:\n            throw new Error(\"Unknown state type\");\n        }\n        break;\n      case \"step\":\n        this.onStep(data.id);\n        break;\n      case \"start\":\n        this.onStart(data.id);\n        break;\n      case \"stop\":\n        this.onStop(data.id);\n        break;\n      case \"remove\":\n        this.onRemove(data.id);\n        break;\n      case \"download-evaluation-cache\":\n        this.onDownloadEvaluationCache(data.id);\n        break;\n      case \"load-evaluation-cache\":\n        this.onLoadEvaluationCache(data.id, data.jsonSerialised);\n        break;\n      case \"clear-evaluation-cache\":\n        this.onClearEvaluationCache(data.id);\n        break;\n    }\n  };\n\n  onSetUnrolledState(instanceId: number, unrolledState: worms.UnrolledState) {\n    this.setStateEvaluator(instanceId, worms.UnrolledStateEvaluator.fromUnrolledStateLazy(unrolledState, true));\n  }\n\n  onSetRolledState(instanceId: number, rolledState: worms.RolledState) {\n    this.setStateEvaluator(instanceId, worms.RolledStateEvaluator.fromRolledState(rolledState));\n  }\n\n  setStateEvaluator(instanceId: number, stateEvaluator: StateEvaluator) {\n    this.onStop(instanceId);\n    const instance = {\n      id: instanceId,\n      stateEvaluator,\n      searching: false,\n      evaluationCache: this.evaluationCacheCache.getSync(stateEvaluator.state.totalDiceCount, evaluationCache => {\n        const instance = this.instancesById.get(instanceId);\n        if (!instance) {\n          return;\n        }\n        this.setEvaluationCache(instance, evaluationCache);\n      }),\n    };\n    this.instancesById.set(instanceId, instance);\n    this.setEvaluationCache(instance, instance.evaluationCache);\n    if (!instance.stateEvaluator.finished && !instance.searching && instance.stateEvaluator.state.totalDiceCount <= 4) {\n      this.onStart(instance.id);\n    }\n  }\n\n  onStep(instanceId: number) {\n    if (!this.instancesById.has(instanceId)) {\n      return;\n    }\n    const {stateEvaluator, evaluationCache} = this.instancesById.get(instanceId)!;\n    stateEvaluator.processOne({removeEvaluated: true, evaluationCache});\n    this.postResult(instanceId);\n  }\n\n  onStart(instanceId: number) {\n    this.onStop(instanceId);\n    const iterator = this.makeSearch(instanceId);\n    if (!iterator) {\n      return;\n    }\n    self.setTimeout(iterator, 0);\n  }\n\n  onDownloadEvaluationCache(instanceId: number) {\n    if (!this.instancesById.has(instanceId)) {\n      return;\n    }\n    const {evaluationCache} = this.instancesById.get(instanceId)!;\n    const bytes = new TextEncoder().encode(JSON.stringify(evaluationCache.serialiseCompressed()));\n    const blob = new Blob([bytes], {\n      type: \"application/json;charset=utf-8\",\n    });\n    const url = URL.createObjectURL(blob);\n    self.postMessage({\n      type: \"evaluation-cache-link\",\n      id: instanceId,\n      link: url,\n    });\n  }\n\n  onLoadEvaluationCache(instanceId: number, jsonSerialised: string) {\n    if (!this.instancesById.has(instanceId)) {\n      return;\n    }\n    const instance = this.instancesById.get(instanceId)!;\n    let evaluationCache;\n    try {\n      evaluationCache = worms.EvaluationCache.deserialiseCompressed(JSON.parse(jsonSerialised));\n    } catch (e) {\n      console.error(\"File was not a valid cache file\");\n      return;\n    }\n    this.setEvaluationCache(instance, evaluationCache);\n  }\n\n  setEvaluationCache(instance: InstanceInfo, evaluationCache: worms.EvaluationCache) {\n    this.evaluationCacheCache.set(instance.stateEvaluator.state.totalDiceCount, evaluationCache);\n    instance.evaluationCache = evaluationCache;\n    const evaluator = instance.stateEvaluator;\n    const cacheKey = evaluator.getCacheKey();\n    if (!evaluator.finished && instance.evaluationCache.has(cacheKey)) {\n      evaluator.evaluation = instance.evaluationCache.get(cacheKey)!;\n      instance.searching = true;\n    }\n    this.postResult(instance.id);\n  }\n\n  onClearEvaluationCache(instanceId: number) {\n    if (!this.instancesById.has(instanceId)) {\n      return;\n    }\n    const instance = this.instancesById.get(instanceId)!;\n    instance.evaluationCache = this.evaluationCacheCache\n      .clear(instance.stateEvaluator.state.totalDiceCount);\n    this.postResult(instanceId);\n  }\n\n  makeSearch(instanceId: number, reportInterval: number = 1000): (() => void) | null {\n    if (!this.instancesById.has(instanceId)) {\n      return null;\n    }\n    const instanceInfo = this.instancesById.get(instanceId)!;\n    instanceInfo.searching = true;\n    const iterator = () => {\n      const startTime = new Date();\n      while (instanceInfo.searching && !instanceInfo.stateEvaluator.finished) {\n        instanceInfo.stateEvaluator.processOne({removeEvaluated: true, evaluationCache: instanceInfo.evaluationCache});\n        const endTime = new Date();\n        if ((endTime.valueOf() - startTime.valueOf()) >= reportInterval) {\n          self.setTimeout(iterator, 0);\n          break;\n        }\n      }\n      this.postResult(instanceId);\n    };\n    return iterator;\n  }\n\n  onStop(instanceId: number) {\n    if (!this.instancesById.has(instanceId)) {\n      return;\n    }\n    this.instancesById.get(instanceId)!.searching = false;\n    this.postResult(instanceId);\n  }\n\n  onRemove(instanceId: number) {\n    if (!this.instancesById.has(instanceId)) {\n      return;\n    }\n    this.instancesById.get(instanceId)!.searching = false;\n    this.postResult(instanceId);\n    this.instancesById.delete(instanceId);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst worker = SearchWorker.default();\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [488], function() { return __webpack_require__(9150); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"a83dfabc\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/probable-worms/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t150: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkprobable_worms\"] = self[\"webpackChunkprobable_worms\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(488).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["Worm","rollResults","ValueMap","Map","DiceRoll","items","_classCallCheck","counts","key","total","this","JSON","stringify","Array","from","entries","sort","reduce","_ref","_ref2","_slicedToArray","roll","count","get","_createClass","value","concat","_toConsumableArray","_this$counts$get","has","keys","size","values","current","map","_ref3","_ref4","_","flat","lhs","rhs","copy","replace","set","delete","diceCount","_step","diceRoll","remainingDiceCount","_iterator","_createForOfIteratorHelper","s","n","done","rollCount","Math","min","err","e","f","_this","filter","face","_this2","faces","_this3","some","_step2","_iterator2","dice","Object","group","length","_step3","diceRollInfoByKey","_iterator3","iterateDiceRolls","_regeneratorRuntime","mark","_marked","addLayer","_1","_iterator6","_step6","item","wrap","_context2","prev","next","lists","layer","_iterator4","_step4","list","_iterator5","_step5","newItem","_context","t0","finish","t1","stop","abrupt","fromDice","Chest","diceCounts","hasWorms","canAdd","Error","adding","fromDiceRoll","replacing","Results","other","_step$value","result","_value$constructor","isNaN","parseFloat","toFixed","constructor","name","serialise","_ref7","_ref8","rollTotal","ratio","max","_total","lastMin","lastMax","lastRatio","slice","serialised","serialisedCompressed","_ref9","_ref10","Evaluation","minimumResultOccurrences","exactResultOccurrences","expectedValue","minimumResultOccurrencesEntries","exactResultOccurrencesEntries","serialiseCompressed","options","combined","empty","maxExpectedValue","evaluation","_step2$value","_step3$value","_step4$value","evaluationRatio","_step5$value","_step6$value","_step7","_iterator7","minTotal","_serialised$expectedV","deserialise","_serialised$expectedV2","deserialiseCompressed","EvaluationCache","cache","hitCount","missCount","entryCount","serialisedEvaluation","UnrolledState","chest","type","getNextRolls","rolledState","withRoll","RolledState","add","chestDice","initial","unrolledState","pickedDice","totalDiceCount","selectedDiceCount","nextUnrolledStates","finished","rolledDice","UnrolledStateEvaluator","nextRolledStates","isRoot","state","processOne","nestedProcessOne","compileEvaluation","setOwnEvaluationCache","_ref$removeEvaluated","removeEvaluated","evaluationCache","getCacheKey","getNextRolledStates","nextRolledState","_objectSpread","evaluator","RolledStateEvaluator","fromRolledState","useEvaluationCache","setEvaluationCache","_ref2$removeEvaluated","uniqueDice","join","replaceAll","_ref5","compilePartialEvaluation","useCached","_current$evaluator$ge","_current$evaluator","getCompletionProgress","_ref6$useCached","arguments","undefined","fromTotal","nextRolledStatesWithEvaluation","totalCount","combineProbabilities","nextUnrolledState","fromUnrolledState","_ref5$useCached","combineOptions","_ref6","getNextUnrolledStates","EvaluationCacheCache","evaluationCacheUrlMap","hasFetchedEvaluationCacheMap","evaluationCacheMap","_get","_asyncToGenerator","_callee","_yield$this$fetchEval","shouldFetchEvaluationCache","fetchEvaluationCache","t4","sent","t3","t5","t6","t2","t7","worms","t8","call","shouldSetEmptyEvaluationCache","_x","apply","callback","_callee2","_this$evaluationCache","_this$hasFetchedEvalu","_fetchEvaluationCache","_callee3","evaluationCacheUrl","response","_context3","fetch","process","text","parse","console","error","_x2","SearchWorker","worker","instancesById","evaluationCacheCache","onMessage","data","stateType","onSetUnrolledState","id","onSetRolledState","onStep","onStart","onStop","onRemove","onDownloadEvaluationCache","onLoadEvaluationCache","jsonSerialised","onClearEvaluationCache","onmessage","message","postMessage","instanceId","stateEvaluator","searching","progress","searchFinished","cacheStats","getStats","setStateEvaluator","fromUnrolledStateLazy","instance","getSync","postResult","iterator","makeSearch","self","setTimeout","bytes","TextEncoder","encode","blob","Blob","url","URL","createObjectURL","link","cacheKey","clear","reportInterval","instanceInfo","startTime","Date","valueOf","default","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","x","__webpack_exports__","O","deferred","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","every","splice","r","d","definition","o","defineProperty","enumerable","chunkId","Promise","all","promises","u","miniCssF","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","p","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","push","bind","moreModules","runtime","pop","then"],"sourceRoot":""}